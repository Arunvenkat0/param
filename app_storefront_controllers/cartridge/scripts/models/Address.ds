'use strict';

/** @module models/Address */

/* API Includes */
var AbstractModel = require('./AbstractModel');
var Transaction         = require('dw/system/Transaction');
var Form = require('~/cartridge/scripts/models/Form');

/**
 * Address helper providing enhanced address related functionality
 * @class module:models/Address~Address
 * @extends module:models/AbstractModel
 */
var Address = AbstractModel.extend(
/** @lends module:models/Address~Address.prototype */
{
    /**
     * Removes the address.
     * Note that the deletion will fail in case the address is still associated with a product list
     *
     * @transactional
     * @return {Boolean} true if the address was successfully deleted, false otherwise
     */
    remove : function () {
        var addressBook = customer.profile.addressBook;
        var address = this.object;
        if(!address){
            return false
        }
        var priceModel;
		/** @type {dw.campaign.ABTestMgr} */
		priceModel = Form.get('form');
        var listsWithAddress = dw.customer.ProductListMgr.getProductLists(address);
        if(!listsWithAddress.empty){
            return false;
        }
        Transaction.wrap(function(){
            addressBook.removeAddress(address);
        });

        return true;
    }

});

/**
 * Use this method to get a new instance for a given address or address ID.
 *
 * @param parameter {dw.order.OrderAddress|dw.customer.CustomerAddress|String} The address object to enhance/wrap or an address ID
 * @returns {module:models/Address~Address}
 */
Address.get = function (parameter) {
    var obj = null;
    if (typeof parameter === 'string') {
        obj = customer.addressBook.getAddress(parameter);
    }
    else if (typeof parameter === 'object') {
        obj = parameter;
    }
    return new Address(obj);
};

/**
 * Creates a new address.
 *
 * @transactional
 * @param {dw.web.FormGroup} [addressForm] The form which is used to update the address
 * @returns {module:models/Address~Address} The created address
 */
Address.create = function(addressForm) {
    var addressBook = customer.profile.addressBook;

    return Transaction.wrap(function(){
        var address = addressBook.createAddress(addressForm.addressid.value);

        if(addressForm){
            if (!Form.get(addressForm).copyTo(address)){
                return null;
            }

            if('states' in addressForm){
                if (!Form.get(addressForm.states).copyTo(address)){
                    return null;
                }
            }
        }
        return new Address(address);
    });
};

/**
 * Updates an existing address using the given form group.
 *
 * @transactional
 * @param {dw.web.FormGroup} [addressForm] The form which is used to update the address
 * @returns {module:models/Address~Address} The updated address
 */
Address.update = function (addressId, addressForm) {
    // get address to be edited
    var addressBook = customer.profile.addressBook;
    var address = addressBook.getAddress(addressId);

    // check if new address id is already taken
    if (address && address.ID !== addressForm.addressid.value)
    {
        address = addressBook.getAddress(addressForm.addressid.value);
    }

    return Transaction.wrap(function(){
        if(addressForm){
            if (!Form.get(addressForm).copyTo(address)){
                addressForm.invalidateFormElement();
                return null;
            }

            if('states' in addressForm){
                if (!Form.get(addressForm.states).copyTo(address)){
                    addressForm.invalidateFormElement();
                    return null;
                }
            }
        }

        return new Address(address);
    });
};

/**
 * Removes the address for the given address ID.
 * Note that the deletion will fail in case the address is still associated with a product list
 *
 * @transactional
 * @param {String} addressId The ID of the address to delete
 * @return {Boolean} true if the address was successfully deleted, false otherwise
 * @see module:models/Address~Address#remove
 */
Address.remove = function (addressId) {
    return Address.get(addressId).remove();
};

/** The order class */
module.exports = Address;