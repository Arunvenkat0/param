'use strict';
/** @module models/ProductVariationModel */

/* API Includes */
var AbstractModel = require('./AbstractModel');

/**
 * ProductVariationModel helper providing enhanced profile functionality
 * @class module:models/ProductVariationModel~ProductVariationModel
 */
var ProductVariationModel = AbstractModel.extend(
    /** @lends module:models/ProductVariationModel~ProductVariationModel.prototype */
    {
        /**
         * Use this method to get a new instance for a given product variation model.
         */
        init : function (parameter) {
            var instance = this._super(parameter);
            this.initProperties();
            this.selectionMap = new dw.util.HashMap();
            return instance;
        },

        /**
         * Update the model with given variation attribute to the given value
         *
         * @param {dw.catalog.ProductVariationAttrbute}      variationAttribute      the attribute
         * @param {dw.catalog.ProductVariationAttrbuteValue} variationAttributeValue the variation attribute value
         */
        setSelectedVariationValue : function (variationAttribute, variationAttributeValue) {
            this.selectionMap.put(variationAttribute.ID, variationAttributeValue.ID);
        },

        /**
         * Get the currently selected variant or null if none
         *
         * @return {dw.catalog.Variant} the selected variant
         */
        getSelectedVariant : function () {
            var filteredList = this.object.getVariants(this.selectionMap);
            if (filteredList.size() === 1) {
                return filteredList[0];
            } else {
                return null;
            }
        },

        /**
         * Check if the given attribute/value combination is currently selected
         *
         * @param {dw.catalog.ProductVariationAttrbute}      variationAttribute      the attribute
         * @param {dw.catalog.ProductVariationAttrbuteValue} variationAttributeValue the variation attribute value
         * @returns {Boolean} true if the value is selected
         */
        isSelectedAttributeValue : function (variationAttribute, variationAttributeValue) {
            return this.selectionMap.get(variationAttribute.ID) === variationAttributeValue.ID;
        },

        /**
         * Returns the ProductVariationAttrbuteValue object for the given attribute and the value ID
         *
         * @param {dw.catalog.ProductVariationAttrbute} variationAttribute      the attribute
         * @param {String}                      variationAttributeValueID       the variation attribute value ID
         */
        getVariationAttributeValue : function (variationAttribute, variationAttributeValueID) {
            if (!empty(variationAttributeValueID)) {
                var allValues = this.object.getAllValues(variationAttribute);
                for (var i = 0; i< allValues.length; i++) {
                    if (allValues[i].ID === variationAttributeValueID) {
                        return allValues[i];
                    }
                }
            }
            return null;
        },

        /**
         * Get the currently selsected value for a given attribute
         *
         * @param  {dw.catalog.ProductVariationAttrbute} variationAttribute the attribute
         * @return {dw.catalog.ProductVariationAttrbuteValue}               the attribute value or null
         */
        getSelectedValue : function(variationAttribute) {
            if (!empty(variationAttribute)) {
                return this.getVariationAttributeValue(variationAttribute, this.selectionMap.get(variationAttribute.ID));
            } else {
                return null;
            }
        },

        urlSelectVariationValue : function (action, variationAttribute, variationAttributeValue) {
            var url = this.object.urlSelectVariationValue(action, variationAttribute, variationAttributeValue);
            var entrySet = this.selectionMap.entrySet();
            for (var i = 0; i < entrySet.length; i++) {
                var entry = entrySet[i];
                var urlKey = 'dwvar_' + this.object.master.ID + '_' + entry.key;
                if (url.indexOf(urlKey) === -1) {
                    if (url.indexOf('?') === -1) {
                        url += '?';
                    } else {
                        url += '&';
                    }
                    url += urlKey + '=' +  entry.value;
                }
            }
            return url;

        }

    });

/** The model class */
module.exports = ProductVariationModel;
