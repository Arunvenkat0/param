'use strict';

/** @module views/ProductView */
var View = require('./View');

var ProductView = View.extend(
/** @lends module:views/ProductView~ProductView.prototype */
    {
        /**
         * The purpose of this function is to process variation value selections, and calculate and return the ProductVariationModels
         * for one or multiple products. The function uses the given HttpParameterMap and so the request parameters do not
         * have to be passed in. Variation value selections must be specified as HTTP parameters in the following form:
         * "{prefix_}{pid}_varAttrID={varAttrValueID}". A custom prefix can be set using the "optionalCustomPrefix" parameter.
         * Otherwise, the default prefix "dwvar_" is used. {pid} is the product id. Example: "dwvar_PN00050_color=red". For
         * each product specified as {pid}, a ProductVariationModel instance is created and returned as an element of the
         * "ProductVariationModels" HashMap return parameter. The function processes variation attributes in their defined order
         * and ignores attributes or values not defined for a variation. The function returns a map of ProductVariationModels
         * with the product instance as the key and the ProductVariationModel as the value. For backwards compatibility reasons,
         * the function accepts an optional Product instance as input parameter. The product may either be a master or a variant.
         * If specified, the function returns the ProductVariationModel for this product as "ProductVariationModel" and also as
         * element of the "ProductVariationModels" HashMap parameter. Also, the system tries to find a variant which matches
         * the attributes selected in the HttpParameterMap as closely as possible. The matching product is returned under the
         * key "SelectedProduct". If the passed product is neither a master or a variant, then the product itself is simply
         * returned under the key "SelectedProduct". No value will be returned under the "SelectedProduct" key unless a Product
         * instance was passed to the function.
         *
         * @param parameterMap {dw.web.HttpParameterMap} Variation value selections as HTTP parameters.
         * @param optionalCustomPrefix {String} Optional prefix for HTTP parameters. If nothing is passed, the default prefix "dwvar_" is assumed.
         *
         * @returns {{ProductVariationModels: dw.util.LinkedHashMap, ProductVariationModel: dw.catalog.ProductVariationModel, SelectedProduct: dw.catalog.Product}}
         */
        getProductVariationSelections : function (parameterMap, optionalCustomPrefix) {
            return require('~/cartridge/scripts/util/ProductVariationSelection').getProductVariationSelections(this.product.object, parameterMap, optionalCustomPrefix);
        },

        /**
         * View for store locator functionality.
         *
         * @constructs
         * @extends module:views/View~View
         */
        init : function (params) {
            this._super(params);

            this.Product = params.product.object;

            return this;
        }

    });

module.exports = ProductView;

