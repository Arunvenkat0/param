'use strict';

/**
 * Renders product detail pages, snippets/includes used on product detail pages as well as product tiles for product
 * listings.
 *
 * @module controllers/Product
 */

/* Script Modules */
var app = require('~/cartridge/scripts/app');
var guard = require('~/cartridge/scripts/guard');

/**
 * Renders a full product detail page. If the http parameter "format" is set to
 * "json" the product details are rendered as JSON response.
 */
function show() {

    var Product = app.getModel('Product');
    var product = Product.get(request.httpParameterMap.pid.stringValue);

    if (product.isVisible()) {
        require('~/cartridge/scripts/meta').update(product);

        var productView = app.getView('ProductView', {
            product        : product,
            DefaultVariant : product.getDefaultVariant()
        });

        var productOptionSelections = productView.getProductOptionSelections(request.httpParameterMap);
        var productVariationSelections = productView.getProductVariationSelections(request.httpParameterMap);

        productView.CurrentOptionModel = productOptionSelections.ProductOptionModel;
        productView.ProductOptionModels = productOptionSelections.ProductOptionModels;
        productView.CurrentVariationModel = productVariationSelections.ProductVariationModel;
        productView.ProductVariationModels = productVariationSelections.ProductVariationModels;

        productView.render(product.getTemplate() || 'product/product');
    }
    else {
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        response.setStatus(410);
        app.getView().render('error/notfound');
    }

}

/**
 * Renders a full product detail page. If the http parameter "format" is set to
 * "json" the product details are rendered as JSON response.
 */
function detail() {

    var Product = app.getModel('Product');
    var product = Product.get(request.httpParameterMap.pid.stringValue);

    if (product.isVisible()) {
        var productView = app.getView('ProductView', {
            product        : product,
            DefaultVariant : product.getDefaultVariant()
        });

        var productOptionSelections = productView.getProductOptionSelections(request.httpParameterMap);
        var productVariationSelections = productView.getProductVariationSelections(request.httpParameterMap);

        productView.CurrentOptionModel = productOptionSelections.ProductOptionModel;
        productView.ProductOptionModels = productOptionSelections.ProductOptionModels;
        productView.CurrentVariationModel = productVariationSelections.ProductVariationModel;
        productView.ProductVariationModels = productVariationSelections.ProductVariationModels;

        productView.render(product.getTemplate() || 'product/productdetail');
    }
    else {
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        response.setStatus(410);
        app.getView().render('error/notfound');
    }

}

/**
 * Returns product availability data as a JSON object. Called via product.js
 * (reloadAvailability). Input: pid (required) - product ID quantity (required) -
 * the quantity to use for determining availability
 */
function getAvailability() {

    var Product = app.getModel('Product');
    var product = Product.get(request.httpParameterMap.pid.stringValue);

    if (product.isVisible()) {
        response.renderJSON(product.getAvailability(request.httpParameterMap.Quantity.stringValue));
    }
    else {
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        response.setStatus(410);
        app.getView().render('error/notfound');
    }

}

/**
 * Renders a product tile, e.g. used within family and search result pages.
 */
function hitTile() {

    var Product = app.getModel('Product');
    var product = Product.get(request.httpParameterMap.pid.stringValue);

    if (product.isVisible()) {
        var productView = app.getView('ProductView', {
            product       : product,
            showswatches  : true,
            showpricing   : true,
            showpromotion : true,
            showrating    : true,
            showcompare   : true
        });

        // special handling for dictionary key 'product' as the template requires it in lower case
        delete productView.Product;
        productView.product = product.object;

        productView.render(product.getTemplate() || 'product/producttile');
    }

}

/**
 * Renders a navigation include on product detail pages. Provides next/back links for customers to traverse a product
 * list, like search result list etc.
 */
function productNavigation() {

    var params = request.httpParameterMap;

    var Product = app.getModel('Product');
    var product = Product.get(params.pid.stringValue);

    if (product.isVisible()) {

        // construct the search based on the HTTP params & set the categoryID
        var Search = app.getModel('Search');
        var productSearchModel = Search.initializeProductSearchModel(params);

        // need to reset pid in search
        productSearchModel.setProductID(null);

        // special handling if no category ID is given in URL
        if (!params.cgid.value) {
            var category = null;

            if (product.getPrimaryCategory()) {
                category = product.getPrimaryCategory();
            }
            else if (product.getVariationModel().getMaster()) {
                category = product.getVariationModel().getMaster().getPrimaryCategory();
            }

            if(category && category.isOnline()){
                productSearchModel.setCategoryID(category.getID());
            }
        }

        // execute the product search
        productSearchModel.search();

        // construct the paging model
        var PagingModel = require('dw/web/PagingModel');
        var productPagingModel = new PagingModel(productSearchModel.productSearchHits, productSearchModel.count);
        productPagingModel.setPageSize(3);
        productPagingModel.setStart(params.start.intValue - 2);

        app.getView({
            ProductPagingModel  : productPagingModel,
            ProductSearchResult : productSearchModel
        }).render('search/productnav');

    }
    else {
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        response.setStatus(410);
        app.getView().render('error/notfound');
    }

}

/**
 * Renders variation selection controls for the given PID.
 */
function variation() {

    var Product = app.getModel('Product');
    var product = Product.get(request.httpParameterMap.pid.stringValue);

    if (product.isVisible()) {

        var productView = app.getView('ProductView', {
            product : product
        });

        var productVariationSelections = productView.getProductVariationSelections(request.httpParameterMap);
        var currentVariationModel = productVariationSelections.ProductVariationModel;

        product = Product.get(productVariationSelections.SelectedProduct);

        // TODO this is apparently nowhere set to true..
        var resetAttributes = false;

        if (product.isMaster()) {
            product = Product.get(product.getDefaultVariant());
            resetAttributes = false;
        }

        if (request.httpParameterMap.source.stringValue === 'bonus') {
            var Cart = app.getModel('Cart');
            var bonusDiscountLineItems = Cart.get().getBonusDiscountLineItems();
            var bonusDiscountLineItem = null;

            for (var i = 0; i < bonusDiscountLineItems.length; i++) {
                if (bonusDiscountLineItems[i].UUID === request.httpParameterMap.bonusDiscountLineItemUUID.stringValue) {
                    bonusDiscountLineItem = bonusDiscountLineItems[i];
                    break;
                }
            }

            app.getView('ProductView', {
                product               : product,
                CurrentVariationModel : currentVariationModel,
                BonusDiscountLineItem : bonusDiscountLineItem
            }).render('product/components/bonusproduct');
        }
        else if (request.httpParameterMap.format.stringValue) {
            app.getView('ProductView', {
                product         : product,
                GetImages       : true,
                resetAttributes : resetAttributes
            }).render('product/productcontent');
        }
        else {
            app.getView('ProductView', {
                product               : product,
                CurrentVariationModel : currentVariationModel
            }).render('product/product');
        }
    }
    else {
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        response.setStatus(410);
        app.getView().render('error/notfound');
    }

}

/**
 * Renders variation selection controls for the product set item identified by the given PID.
 */
function variationPS() {

    var Product = app.getModel('Product');
    var product = Product.get(request.httpParameterMap.pid.stringValue);

    if (product.isVisible()) {

        var productView = app.getView('ProductView', {
            product : product
        });

        var productVariationSelections = productView.getProductVariationSelections(request.httpParameterMap);
        product = Product.get(productVariationSelections.SelectedProduct);

        if (product.isMaster()) {
            product = Product.get(product.getDefaultVariant());
        }

        if (request.httpParameterMap.format.stringValue) {
            app.getView('ProductView', {product : product}).render('product/components/productsetproduct');
        }
        else {
            app.getView('ProductView', {product : product}).render('product/product');
        }
    }
    else {
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        response.setStatus(410);
        app.getView().render('error/notfound');
    }

}

/**
 * Renders the last visited products based on the session information.
 */
function includeLastVisited() {

    response.renderTemplate('product/lastvisited', {
        LastVisitedProducts : app.getModel('RecentlyViewedItems').getRecentlyViewedProducts(3)
    });

}

/**
 * Renders a list of bonus products for a bonus discount line item.
 */
function getBonusProducts() {
    var Cart = app.getModel('Cart');
    var bonusDiscountLineItems = Cart.get().getBonusDiscountLineItems();
    var bonusDiscountLineItem = null;

    for (var i = 0; i < bonusDiscountLineItems.length; i++) {
        if (bonusDiscountLineItems[i].UUID === request.httpParameterMap.bonusDiscountLineItemUUID.stringValue) {
            bonusDiscountLineItem = bonusDiscountLineItems[i];
            break;
        }
    }

    app.getView({
        BonusDiscountLineItem : bonusDiscountLineItem
    }).render('product/bonusproductgrid');

}

/**
 * Renders a set item view for the given PID.
 */
function getSetItem() {

    var Product = app.getModel('Product');
    var product = Product.get(request.httpParameterMap.pid.stringValue);

    if (product.isVisible()) {
        app.getView('ProductView', {
            product : product,
            isSet   : true
        }).render('product/components/productsetproduct');
    }
    else {
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        response.setStatus(410);
        app.getView().render('error/notfound');
    }

}

/**
 * Renders the product detail page within the context of a category.
 * Note: this start node is not obsolete and needs to remain as it's by some hardcoded platform rewrite rules.
 */
function showInCategory() {
    show();
}

/*
 * Web exposed methods
 */
/** @see module:controllers/Product~show */
exports.Show                = guard.ensure(['get'], show);
/** @see module:controllers/Product~showInCategory */
exports.ShowInCategory      = guard.ensure(['get'], showInCategory);
/** @see module:controllers/Product~detail */
exports.Detail              = guard.ensure(['get'], detail);
/** @see module:controllers/Product~getAvailability */
exports.GetAvailability     = guard.ensure(['get'], getAvailability);
/** @see module:controllers/Product~hitTile */
exports.HitTile             = guard.ensure(['get'], hitTile);
/** @see module:controllers/Product~productNavigation */
exports.Productnav          = guard.ensure(['get'], productNavigation);
/** @see module:controllers/Product~variation */
exports.Variation           = guard.ensure(['get'], variation);
/** @see module:controllers/Product~variationPS */
exports.VariationPS         = guard.ensure(['get'], variationPS);
/** @see module:controllers/Product~includeLastVisited */
exports.IncludeLastVisited  = guard.ensure(['get'], includeLastVisited);
/** @see module:controllers/Product~getBonusProducts */
exports.GetBonusProducts    = guard.ensure(['get'], getBonusProducts);
/** @see module:controllers/Product~getSetItem */
exports.GetSetItem          = guard.ensure(['get'], getSetItem);
