'use strict';

/**
 * Controller implementing cart related functionality like add to / remove from cart for products, coupons, product list
 * items etc.
 *
 * @module controllers/Cart
 */

/* API Includes */
var ArrayList = require('dw/util/ArrayList');
var Cart = require('~/cartridge/scripts/models/Cart');
var Content = require('~/cartridge/scripts/models/Content');
var Product = require('~/cartridge/scripts/models/Product');
var ProductListMgr = require('dw/customer/ProductListMgr');
var Transaction = require('dw/system/Transaction');

/* Script Modules */
var app = require('~/cartridge/scripts/app');
var guard = require('~/cartridge/scripts/guard');
var cartForm = require('~/cartridge/scripts/models/Form').get('cart');
var pageMeta = require('~/cartridge/scripts/meta');

/**
 * Renders the basket content.
 */
function show() {

    session.forms.cart.shipments.invalidateFormElement();
    session.forms.login.invalidateFormElement();

    app.getView('CartView', {
        cart               : Cart.get(),
        RegistrationStatus : false
    }).render('checkout/cart/cart');

}

/**
 * Form handler for the cart form.
 */
function submitForm() {
    // we have no existing state, so resolve the basket again
    var cart = Cart.get();

    var formResult = cartForm.handleAction({
        'addCoupon'             : function (formgroup) {
            if (formgroup.couponCode.htmlValue) {

                var status = Transaction.wrap(function () {
                        return cart.addCoupon(formgroup.couponCode.htmlValue);
                    }
                );

                if (status) {
                    return {cart : cart, CouponStatus : status};
                }
                else {
                    return {cart : cart, CouponError : 'NO_ACTIVE_PROMOTION'};
                }
            }
            else {
                return {cart : cart, CouponError : 'COUPON_CODE_MISSING'};
            }
        },
        'calculateTotal'        : function (formgroup) {
            // nothing to do here as re-calculation happens during view anyways
            return {cart : cart};
        },
        'checkoutCart'          : function (formgroup) {
            var validationResult = cart.validateForCheckout();

            if (validationResult.EnableCheckout) {
                //require('./COCustomer').Start();
                response.redirect(dw.web.URLUtils.https('COCustomer-Start'));

                return null;
            }
            else {
                return {
                    cart           : cart,
                    BasketStatus   : validationResult.BasketStatus,
                    EnableCheckout : validationResult.EnableCheckout
                };
            }
        },
        'continueShopping'      : function (formgroup) {
            continueShopping();
            return null;
        },
        'deleteCoupon'          : function (formgroup) {
            Transaction.wrap(function () {
                cart.removeCouponLineItem(formgroup.getTriggeredAction().object)
            });

            return {cart : cart};
        },
        'deleteGiftCertificate' : function (formgroup) {
            Transaction.wrap(function () {
                cart.removeGiftCertificateLineItem(formgroup.getTriggeredAction().object)
            });

            return {cart : cart};
        },
        'deleteProduct'         : function (formgroup) {
            Transaction.wrap(function () {
                cart.removeProductLineItem(formgroup.getTriggeredAction().object)
            });

            return {cart : cart};
        },
        'editLineItem'          : function (formgroup) {

            var product = Product.get(request.httpParameterMap.pid.stringValue).object;
            var productOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(product, request.httpParameterMap).ProductOptionModel;

            Transaction.wrap(function () {
                cart.updateLineItem(formgroup.getTriggeredAction().object, product, request.httpParameterMap.Quantity.doubleValue, productOptionModel)
                cart.calculate();
            });

            response.renderTemplate('checkout/cart/refreshcart');
            return null;
        },
        'login'                 : function (formgroup) {
            // TODO should not be processed here at all
            var success = require('./Login').Process();

            if (success) {
                response.redirect(dw.web.URLUtils.https('COCustomer-Start'));
                return null;
            }
            else if (!success) {
                return {cart : cart};
            }
        },
        'logout'                : function (formgroup) {
            new dw.system.Pipelet('LogoutCustomer').execute();
            return {cart : cart};
        },
        'register'              : function (formgroup) {
            require('./Account').StartRegister();
            Transaction.wrap(function () {
                cart.calculate();
            });

            return null;
        },
        'unregistered'          : function (formgroup) {
            require('./COShipping').Start();
            return null;
        },
        'updateCart'            : function (formgroup) {

            Transaction.wrap(function () {

                // remove zero quantity line items
                for (var i = 0; i < session.forms.cart.shipments.childCount; i++) {
                    var shipmentItem = session.forms.cart.shipments[i];

                    for (var j = 0; j < shipmentItem.items.childCount; j++) {
                        var item = shipmentItem.items[j];

                        if (item.quantity.value === 0) {
                            cart.removeProductLineItem(item.object);
                        }
                    }
                }

                session.forms.cart.shipments.accept();
                cart.checkInStoreProducts();
            });

            return {cart : cart};
        },
        'error'                 : function (formgroup) {
            // no special error handling in case the form is invalid
            return null;
        }
    });

    if (formResult) {
    	var cartAsset = Content.get('cart');
        pageMeta.update(cartAsset);

        app.getView('CartView', formResult).render('checkout/cart/cart');
    }
}

/**
 * Adds a product to the cart. Should be used only for simple UI.
 */
function addProduct() {
    var params = request.httpParameterMap;

    if (params.source && params.source.stringValue === 'giftregistry' && params.cartAction && params.cartAction.stringValue === 'update') {
        require('./GiftRegistry').ReplaceProductListItem();
        return;
    }

    if (params.source && params.source.stringValue === 'wishlist' && params.cartAction && params.cartAction.stringValue === 'update') {
        require('./Wishlist').ReplaceProductListItem();
        return;
    }

    var cart = Cart.goc();

    // update product lineitem
    if (params.uuid.stringValue) {

        var lineItem = cart.getProductLineItemByUUID(params.uuid.stringValue);

        if (lineItem) {

            var product = Product.get(request.httpParameterMap.pid.stringValue).object;
            var productOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(product, request.httpParameterMap).ProductOptionModel;

            Transaction.wrap(function () {
                cart.updateLineItem(lineItem, product, productOptionModel)
            });

            if (params.format.stringValue.toLowerCase() === 'ajax') {
                response.renderTemplate('checkout/cart/refreshcart');
                return;
            }
            else {
                response.redirect(dw.web.URLUtils.url('Cart-Show'));
                return;
            }
        }
        else {

            app.getView('CartView', {
                Basket : cart
            }).render('checkout/cart/cart');

            return;
        }
    }
    // add product list item
    else if (params.plid.stringValue) {

        var productList = ProductListMgr.getProductList(params.plid.stringValue);
        Transaction.wrap(function () {
            cart.addProductListItem(productList && productList.getItem(params.itemid.stringValue), params.Quantity.doubleValue, params.cgid.value);
        });

    }
    // add product
    else {

        var previousBonusDiscountLineItems = cart.getBonusDiscountLineItems();

        var product = Product.get(params.pid.stringValue).object;

        if (product.productSet) {
            var childPids = params.childPids.stringValue.split(",");
            var childQtys = params.childQtys.stringValue.split(",");
            var counter = 0;

            for (var i = 0; i < childPids.length; i++) {
                var childProduct = Product.get(childPids[i]).object;

                if (childProduct.productSet) {
                    counter++;
                    continue;
                }

                var childProductOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(childProduct, request.httpParameterMap).ProductOptionModel;

                Transaction.wrap(function () {
                    cart.addProductItem(childProduct, parseInt(childQtys[counter]), params.cgid.value, childProductOptionModel);
                });
                counter++;
            }
        }
        else {
            var productOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(product, request.httpParameterMap).ProductOptionModel;

            Transaction.wrap(function () {
                cart.addProductItem(product, params.Quantity.doubleValue, params.cgid.value, productOptionModel);
            });
        }

        // When adding a new product to the cart check to see if it has triggered a new bonus discount line item.
        var newBonusDiscountLineItem = cart.getNewBonusDiscountLineItem(previousBonusDiscountLineItems);
    }

    if (params.format.stringValue === 'ajax') {
        app.getView('CartView', {
            cart                  : cart,
            BonusDiscountLineItem : newBonusDiscountLineItem
        }).render('checkout/cart/minicart');
    }
    else {
        response.redirect(dw.web.URLUtils.url('Cart-Show'));
    }

}

/**
 * Redirects the user to the last visited catalog URL.
 */
function continueShopping() {

    var location = require('~/cartridge/scripts/util/Browsing').lastCatalogURL();

    if (location) {
        response.redirect(location);
    }
    else {
        response.redirect(dw.web.URLUtils.httpHome());
    }

}

/**
 * The cart page provides various actions to be performed, e.g. line item editing, coupon redemption etc.
 */
function miniCart() {

    app.getView({Basket : Cart.get().object}).render('checkout/cart/minicart');

}

/**
 * Adds the product with the given ID to the wish list.
 */
function addToWishlist() {
    var productID = request.httpParameterMap.pid.stringValue;
    var product = Product.get(productID).object;
    var productOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(product, request.httpParameterMap).ProductOptionModel;

    var productList = require('~/cartridge/scripts/models/ProductList').get();
    productList.addProduct(product, request.httpParameterMap.Quantity.doubleValue, productOptionModel);

    app.getView('CartView', {
        cart                   : Cart.get(),
        ProductAddedToWishlist : productID
    }).render('checkout/cart/cart');

}

/**
 * Determines an existing basket from the current session.
 *
 * @deprecated Use {@link module:models/Cart~Cart#get} instead.
 */
function getExistingBasket() {
    return {
        Basket : Cart.get().object
    };
}

/**
 * Determines an existing basket from the current session. If a basket wasn't found, a new basket is created. If a new
 * basket couldn't be created, the pipeline ends in a named end node "error". Calling pipelines are responsible to
 * properly react on the "error" end node.
 *
 * @deprecated Use {@link module:models/Cart~Cart#goc} instead.
 */
function getBasket() {
    return Cart.goc().object;
}

/**
 * Calculates an existing basket. Call this pipeline always if the changes to the basket content is made (e.g. addition
 * or removal of a product or gift certificate or setting of a shipping method).
 *
 * @deprecated Use {@link module:models/Cart~Cart#calculate} instead.
 */
function calculate() {

    var cart = Cart.get();
    Transaction.wrap(function () {
        cart.calculate();
    });

    return cart.object;
}

/**
 * Add bonus product to cart.
 */
function addBonusProductJson() {

    var cart = Cart.get();

    // parse bonus product JSON
    var data = JSON.parse(request.httpParameterMap.getRequestBodyAsString());
    var productsJSON = new ArrayList();

    for (var h = 0; h < data.bonusproducts.length; h++) {
        productsJSON.addAt(0, data.bonusproducts[h].product);
    }

    var bonusDiscountLineItem = cart.getBonusDiscountLineItemByUUID(request.httpParameterMap.bonusDiscountLineItemUUID.stringValue);

    Transaction.begin();
    cart.removeBonusDiscountLineItemProducts(bonusDiscountLineItem);

    for (var i = 0; i < productsJSON.length; i++) {

        var product = Product.get(productsJSON[i].pid).object;
        var lineItem = cart.addBonusProduct(bonusDiscountLineItem, product, new ArrayList(productsJSON[i].options), parseInt(productsJSON[i].qty));

        if (lineItem && product) {
            if (product.isBundle()) {

                var childPids = productsJSON[i].childPids.split(',');

                for (var j = 0; j < childPids.length; j++) {
                    var childProduct = Product.get(childPids[j]).object;

                    if (childProduct) {

                        var ScriptResult = new dw.system.Pipelet('Script', {
                            Transactional : false,
                            OnError       : 'PIPELET_ERROR',
                            ScriptFile    : 'cart/UpdateProductOptionSelections.ds'
                        }).execute({
                                SelectedOptions : new dw.util.ArrayList(product.options),
                                Product         : childProduct
                            });

                        var foundLineItem = cart.getBundledProductLineItemByPID(lineItem.getBundledProductLineItems(), (childProduct.isVariant() ? childProduct.masterProduct.ID : childProduct.ID));

                        if (foundLineItem) {
                            new dw.system.Pipelet('ReplaceLineItemProduct').execute({
                                ProductLineItem : foundLineItem,
                                NewProduct      : childProduct
                            });
                        }
                    }
                }
            }
        }
        else {
            Transaction.rollback();

            response.renderJSON({
                success : false
            });
            return;
        }
    }

    cart.calculate();
    Transaction.commit();

    response.renderJSON({
        success : true
    });

}

/**
 * Adds a coupon to the cart using JSON. Called during checkout.
 */
function addCouponJson() {

    var couponCode = request.httpParameterMap.couponCode.stringValue;
    var cart = Cart.get();

    var couponStatus = null;
    Transaction.wrap(function () {
        couponStatus = cart.addCoupon(couponCode);
    });

    if (request.httpParameterMap.format.stringValue === 'ajax') {

        response.renderJSON({
            status      : couponStatus.code,
            message     : dw.web.Resource.msgf('cart.' + couponStatus.code, 'checkout', null, couponCode),
            success     : !couponStatus.error,
            baskettotal : cart.object.adjustedMerchandizeTotalGrossPrice.value,
            CouponCode  : couponCode
        });
    }
}

/*
 * Module exports
 */

/*
 * Web exposed methods
 */
/** @see module:controllers/Cart~addProduct */
exports.AddProduct = guard.ensure(['post'], addProduct);
/** @see module:controllers/Cart~show */
exports.Show = guard.ensure(['https'], show);
/** @see module:controllers/Cart~submitForm */
exports.SubmitForm = guard.ensure(['post', 'https'], submitForm);
/** @see module:controllers/Cart~continueShopping */
exports.ContinueShopping = guard.ensure(['https'], continueShopping);
/** @see module:controllers/Cart~addCouponJson */
exports.AddCouponJson = guard.ensure(['get', 'https'], addCouponJson);
/** @see module:controllers/Cart~miniCart */
exports.MiniCart = guard.ensure(['get'], miniCart);
/** @see module:controllers/Cart~addToWishlist */
exports.AddToWishlist = guard.ensure(['get', 'https','loggedIn'], addToWishlist, { scope : 'wishlist' });
/** @see module:controllers/Cart~addBonusProductJson */
exports.AddBonusProduct = guard.ensure(['post'], addBonusProductJson);

/*
 * Local methods
 */
exports.GetExistingBasket = getExistingBasket;
exports.GetBasket = getBasket;
exports.Calculate = calculate;
