'use strict';

/**
 * This pipeline is called whenever a technical error occurs while processing a
 * request. A standard error page will be shown.
 *
 * @module controllers/Error
 */

/* Script Modules */
var guard = require('~/cartridge/scripts/guard');
var view = require('~/cartridge/scripts/view');

/**
 * Called by the system when an error was not handled locally (general error
 * page).
 *
 * @param {Object} args The arguments
 * @param {String} args.ErrorText The error message
 * @param {String} args.ControllerName The controller which caused the error
 * @param {String} args.CurrentStartNodeName The endpoint name causing the error
 */
function start(args) {
    /*
     * Determine if it was an ajax request by looking at
     * X-Requested-With=XMLHttpRequest request header. This header is set by
     * jQuery for every ajax request. In case the requested response is not json
     * then the decorator is empty. For json, a json response is sent
     */
    var nodecorator = false;

    if (request.getHttpHeaders().get('x-requested-with') === 'XMLHttpRequest') {
        var format = request.httpParameterMap.format.stringValue || '';
        nodecorator = true;

        // the requested output format is json so the error response needs to be json
        if (format === 'json') {
            response.renderJSON({
                Success      : false,
                LogRequestID : request.requestID.split('-')[0]
            });

            return;
        }
    }else{
        // @FIXME Correct would be to set a 404 status code but that breaks the page as it utilizes
        // remote includes which the WA won't resolve
        if('isIncludeRequest' in request){
            if(request.isIncludeRequest()){
                nodecorator = true;
            }else{
                response.setStatus(410);
            }
        }
        view.get({
            PipelineName : args.ControllerName,
            CurrentStartNodeName : args.CurrentStartNodeName,
            ErrorText    : args.ErrorText,
            nodecorator  : nodecorator
        }).render('error/generalerror');
    }
}

/**
 * Called by the system when a session hijacking was detected.
 */
function forbidden() {
	require('~/cartridge/scripts/models/Customer').logout();
    view.get().render('error/forbidden');

}

/*
 * Web exposed methods
 */
/** @see module:controllers/Error~start */
exports.Start = guard.all(start);
/** @see module:controllers/Error~forbidden */
exports.Forbidden = guard.all(forbidden);
