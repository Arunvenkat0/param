'use strict';

/**
 * Controller : Address
 *
 * @module controller/Address
 */

/* Script Modules */
var guard = require('~/cartridge/scripts/guard');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');
var Form = require('~/cartridge/scripts/model/Form');
var content = require('~/cartridge/scripts/model/Content');
var address = content.get('myaccount-addresses');
var addressForm = Form.get('address');

/**
 * List addresses in customer profile Input: (none)
 */
function list() {
   pageMeta.update(address);

   view.get().render('account/addressbook/addresslist');
}

/**
 * Renders a dialog providing functionality to add a new address to the address
 * book.
 */
function add() {
    Form.get('profile').clear();

    view.get().render('account/addressbook/addressdetails', {
        Action : 'add',
        FormAction: 'Address-AddForm'
    });
}

/**
 * The form handler.
 */
function addForm() {
    
    var formResult = addressForm.handleAction({   
        'cancel'             : function (formgroup) {
            response.redirect(dw.web.URLUtils.https('Address-List'));
            return;
        }, 
        'create'             : function (formgroup) {
            if (!create())
            {
                response.redirect(dw.web.URLUtils.https('Address-Add'));
                return;
            }
            
            if (request.httpParameterMap.format.stringValue == 'ajax')
            {
                response.renderJSON({
                    success : true
                });
                return;
            }

            response.redirect(dw.web.URLUtils.https('Address-List'));
            return;
        }   
    });
    

    // TODO what is this? Does this make sense?
    if (session.forms.profile.address.valid)
    {
        if (!create())
        {
            response.redirect(dw.web.URLUtils.https('Address-Add'));
            return;
        }

        if (request.httpParameterMap.format.stringValue == 'ajax')
        {
            response.renderJSON({
                success : true
            });
            return;
        }

        response.redirect(dw.web.URLUtils.https('Address-List'));
        return;
    }

    // default
    response.redirect(dw.web.URLUtils.https('Address-List'));
}

/**
 * Creates an address.
 * 
 * @returns true, if the address was created
 */
function create() {
    var profileForm = session.forms.profile;

    var  createCustomerAddressResult = dw.customer.AddressBook.createAddress(profileForm.address.addressid.value);
    
    var address = createCustomerAddressResult.Address;

    if (!Form.get(profileForm.address).copyTo(address))
    {
        return false;
    }

    if (!Form.get(profileForm.address.states).copyForm(address))
    {
        return false;
    }

    return true;
}


/**
 * Renders a dialog providing functionality to edit an existing address.
 */
function edit() {
    var profileForm = session.forms.profile;
    Form.get('profile').clear();


    var getCustomerAddressResult = new dw.system.Pipelet('GetCustomerAddress').execute({
        AddressID : decodeURIComponent(request.httpParameterMap.AddressID.value),
        Customer : customer
    });
    if (getCustomerAddressResult.result == PIPELET_ERROR)
    {
        view.get().render('components/dialog/closedialog');
        return;
    }
    var address = getCustomerAddressResult.Address;


    Form.get(profileForm.address).copyFrom(address);
    Form.get(profileForm.address.states).copyFrom(address);


    view.get().render('account/addressbook/addressdetails', {
        Action : 'edit',
        FormAction: 'Address-EditForm',
        Address: Address
    });
}


function editForm() {
    
    var formResult = addressForm.handleAction({   
        'cancel'             : function (formgroup) {
            response.redirect(dw.web.URLUtils.https('Address-List'));
            return;
        }, 
        'create'             : function (formgroup) {
            if (!create())
            {
                response.redirect(dw.web.URLUtils.https('Address-Add'));
                return;
            }
            
            if (request.httpParameterMap.format.stringValue == 'ajax')
            {
                response.renderJSON({
                    success : true
                });
                return;
            }
        },
        'edit'             : function (formgroup) {
            if (!session.forms.profile.address.valid)
            {
                response.redirect(dw.web.URLUtils.https('Address-List'));
                return;
            }
            
            if (!edit())
            {
                response.redirect(dw.web.URLUtils.https('Address-List'));
                return;
            }
            
            if (request.httpParameterMap.format.stringValue == 'ajax')
            {
                response.renderJSON({
                    success : true
                });
                return;
            }
        },
        'remove'             : function (formgroup) {
            var DeleteAddressResult = deleteAddress();
            if (DeleteAddressResult.failed)
            {
                response.redirect(dw.web.URLUtils.https('Address-List'));
                return;
            }

            if (request.httpParameterMap.format.stringValue.toLowerCase() == 'ajax')
            {
                response.renderJSON({
                    success : true
                });
                return;
            }
        }   
    });

    response.redirect(dw.web.URLUtils.https('Address-List'));
}

function edit() {
    var profileForm = session.forms.profile;

    // get address to be edited
    var getCustomerAddressResult = dw.customer.AddressBook.getAddress(request.httpParameterMap.addressid.value);
    
    var address = getCustomerAddressResult.Address;
    

    // check if new address id is already taken
    if (address.ID != profileForm.address.addressid.value)
    {
        var getCustomerAddressResult = dw.customer.AddressBook.getAddress(profileForm.address.addressid.value);
    }

    
    if (!Form.get(profileForm.address).copyTo(address))
    {
        profileForm.address.addressid.invalidateFormElement();

        return false;
    }

    if (!Form.get(profileForm.address.states).copyTo(address))
    {
        profileForm.address.addressid.invalidateFormElement();

        return false;
    }

    return true;
}

/**
 * Sets the default address.
 */
function setDefault() {
    
    var getCustomerAddressResult = dw.customer.AddressBook.getAddress(decodeURIComponent(request.httpParameterMap.AddressID.value));
    
    var customerAddress = getCustomerAddressResult.Address;
    
	var customer : dw.customer.Customer = customer;
	var addressBook : dw.customer.AddressBook = customer.profile.addressBook;
	addressBook.setPreferredAddress(customerAddress);
    
    response.redirect(dw.web.URLUtils.https('Address-List'));
}


/**
 * Returns a customer address as JSON response. Required to fill address form
 * with selected address from address book.
 */
function getAddressDetails() {
    var getCustomerAddressResult = dw.customer.AddressBook.getAddress(request.httpParameterMap.addressID.value);
    
    var address = getCustomerAddressResult.Address;

    view.get().render('account/addressbook/addressjson', {
        Address : address
    });
}


/**
 * Deletes an existing address.
 */
function Delete() {
    session.forms.profile.address.addressid.value = decodeURIComponent(request.httpParameterMap.AddressID.value);

    var deleteAddressResult = deleteAddress();

    if (request.httpParameterMap.format.stringValue != 'ajax')
    {
        response.redirect(dw.web.URLUtils.https('Address-List'));
        return;
    }
    
    var Status = deleteAddressResult.Status;

    response.renderJSON({
        status : empty(Status) ? 'OK' : Status.code,
        message : empty(Status) || Status.code == 'OK' ? '' : dw.web.Resource.msg('addressdetails.'
                + dw.customer.CustomerStatusCodes.CUSTOMER_ADDRESS_REFERENCED_BY_PRODUCT_LIST, 'account', null)
    });
}


function deleteAddress() {
    var GetCustomerAddressResult = dw.customer.AddressBook.getAddress(session.forms.profile.address.addressid.value);
    
    var address = GetCustomerAddressResult.Address;

    var RemoveCustomerAddressResult = dw.customer.AddressBook.removeAddress(address);
    
   	var Status = new dw.system.Status(dw.system.Status.ERROR,
            dw.customer.CustomerStatusCodes.CUSTOMER_ADDRESS_REFERENCED_BY_PRODUCT_LIST);
    return {
        failed : true,
        Status : Status
    };
    

    return {
        ok : true
    };
}


/*
 * Module exports
 */

/*
 * Web exposed methods
 */
/** @see module:controller/Address~List */
exports.List = guard.ensure(['get', 'https', 'loggedIn'], list);
/** @see module:controller/Address~Add */
exports.Add = guard.ensure(['get', 'https', 'loggedIn'], add);
/** @see module:controller/Address~AddForm */
exports.AddForm = guard.ensure(['post', 'https', 'loggedIn'], addForm);
/** @see module:controller/Address~Edit */
exports.Edit = guard.ensure(['get', 'https', 'loggedIn'], edit);
/** @see module:controller/Address~EditForm */
exports.editForm = guard.ensure(['post', 'https', 'loggedIn'], editForm);
/** @see module:controller/Address~SetDefault */
exports.SetDefault = guard.ensure(['get', 'https', 'loggedIn'], setDefault);
/** @see module:controller/Address~GetAddressDetails */
exports.GetAddressDetails = guard.ensure(['get', 'https', 'loggedIn'], getAddressDetails);
/** @see module:controller/Address~Delete */
exports.Delete = guard.ensure(['get', 'https', 'loggedIn'], Delete);
