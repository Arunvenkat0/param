'use strict';

/**
 * Manages the order history of a registered user.
 *
 * @module controllers/Order
 * @todo  Requires cleanup
 */


/* API Includes */
var OrderMgr = require('dw/order/OrderMgr');

/* Script Modules */
var guard = require('~/cartridge/scripts/guard');
var orderAsset = require('~/cartridge/scripts/model/Content').get('myaccount-orderhistory');
var orderListForm = require('~/cartridge/scripts/model/Form').get('orders.orderlist');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');

/**
 * Renders a page with the order history of the current logged in customer.
 */
function history()
{
    var orders = new dw.system.Pipelet('SearchSystemObject', {
        ObjectType : 'Order',
        SearchExpression : 'customerNo={1} AND status!={2}'
    }).execute({
        SortBy1 : "creationDate",
        SortBy1Direction : 2,
        Search1Value : customer.profile.customerNo,
        Search2Value : dw.order.Order.ORDER_STATUS_REPLACED
    });
        
    var OrdersUnpaged = orders.SearchResult;
    var OrdersUnpagedCount = orders.SearchResultCount;


    var PagingResult = new dw.system.Pipelet('Paging', {
        DefaultPageSize : 5
    }).execute({
        Objects : OrdersUnpaged,
        PageSize : 5,
        ObjectsCount : OrdersUnpagedCount,
        Start : request.httpParameterMap.start.intValue
    });
    var OrderPagingModel = PagingResult.PagingModel;


    session.forms.orders.orderlist.invalidateFormElement();
    pageMeta.update(orderAsset);
    view.get('Order', {OrderPagingModel : OrderPagingModel}).render('account/orderhistory/orders');
    
    return response;
}


// TODO this should be a simple GET request to avoid refresh / back button
// problems
function orders()
{
    var TriggeredAction = request.triggeredFormAction;
    if (TriggeredAction != null)
    {
        if (TriggeredAction.formId == 'show')
        {
            var Order = TriggeredAction.object;

            view.get('OrderDetails', {Order : Order}).render('account/orderhistory/orderdetails');
        
            return response;
        }
    }

    response.redirect(dw.web.URLUtils.https('Order-History'));
}


/**
 * Renders a page with details of a single order. The pipeline is intended to
 * render the order details by the UUID of the order, therefore can also be used
 * for unregistered customers to track the status of their orders.
 */
function track()
{
    var CurrentHttpParameterMap = request.httpParameterMap;

    if (empty(CurrentHttpParameterMap.orderID.stringValue))
    {
        view.get('OrderDetails').render('account/orderhistory/orderdetails');
        return response;
    }

    var searchKey = CurrentHttpParameterMap.orderID.stringValue;
    searchKey = dw.order.Order.ORDER_STATUS_REPLACED;
    var SearchSystemObjectResult = SystemObjectMgr.querySystemObjects('Order', 'UUID={1} AND status!={2}', '', searchKey);
    var Orders = SearchSystemObjectResult.SearchResult;

    if (empty(Orders))
    {
        view.get('OrderDetails').render('account/orderhistory/orderdetails');
        return response;
    }


    var Order = Orders.next();

    view.get('OrderDetails', { Order : Order }).render('account/orderhistory/orderdetails');
    return response;
}


/**
 * This pipeline is intended to find an order by its order number and the postal
 * code of the billing address. The pipeline is used by the login page and end
 * on a named end node "ok" if the order was found or ends with a named end node
 * "error" to report back to the calling pipeline.
 */
function find()
{
    var orderTrackForm = session.forms.ordertrack;

    if (empty(orderTrackForm.orderNumber.value) || empty(orderTrackForm.postalCode.value)
            || empty(orderTrackForm.orderEmail.value))
    {
        return {
            error : true
        };
    }

    var searchKey = dw.order.Order.ORDER_STATUS_REPLACED;
    var orderTrack = SystemObjectMgr.querySystemObjects('Order', 'orderNo={1} AND status!={2}', 'creationDate 2', searchKey);

    var Orders = orderTrack.SearchResult;

    if (empty(Orders))
    {
        return {
            error : true
        };
    }

    var FoundOrder = Orders.next();

    if (!FoundOrder.billingAddress.postalCode.toUpperCase().equals(orderTrackForm.postalCode.value.toUpperCase()))
    {
        return {
            error : true
        };
    }

    var Order = FoundOrder;

    if (Order.customerEmail != orderTrackForm.orderEmail.value)
    {
        return {
            error : true
        };
    }

    return {
        ok : true,
        Order : Order
    };
}

/*
 * Private methods
 */

/**
 * Decorator which ensures that the customer is authenticated.
 */
function loggedIn(action)
{
    return function()
    {
        if (!customer.authenticated)
        {
            var accountController = require('./Account');
            accountController.requireLogin({
                TargetAction : 'Order-History'
            });
            return;
        }

        action();
    };
}

/*
 * Module exports
 */

/*
 * Web exposed methods
 */
exports.History = guard.ensure(['get', 'https'],loggedIn(history));
exports.Orders = guard.ensure(['post', 'https'],loggedIn(orders));
exports.Track = guard.ensure(['get', 'https'],orders);

/*
 * Local methods
 */
exports.find = find;
