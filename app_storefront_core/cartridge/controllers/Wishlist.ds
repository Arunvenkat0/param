'use strict';

/**
 * Controller : wishlist
 *
 * @module controllers/Wishlist
 */

/* API Includes */
var CustomerMgr = require('dw/customer/CustomerMgr');
var Form = require('~/cartridge/scripts/models/Form');
var Product = require('~/cartridge/scripts/models/Product');
var ProductList = require('~/cartridge/scripts/models/ProductList');
var Transaction = require('dw/system/Transaction');

/* Script Modules */
var content = require('~/cartridge/scripts/models/Content');
var wishlistAsset = content.get('myaccount-wishlist');
var guard = require('~/cartridge/scripts/guard');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');
var wishlistForm = Form.get('wishlist');

/**
 * Forms handling for the landing page
 */
function landingForm() {
    var formResult = wishlistForm.handleAction({
        'register'             : function (formgroup) {
           response.redirect(dw.web.URLUtils.https('Account-StartRegister'));
           return;
        },
        'search'             : function (formgroup) {
            Search();
            return;
        }
    });
}


/**
 * Renders the wishlist page.
 */
function show() {
    pageMeta.update(wishlistAsset);

    wishlistForm.clear();

    var productList = ProductList.get();
    wishlistForm.get('items').copyFrom(productList.object.items);
    // init address book
    wishlistForm.get('addressbook').get('addresses').copyFrom(customer.profile.addressBook.addresses);

    view.get({
        ProductList : productList.object
    }).render('account/wishlist/wishlist');
}


/**
 * Forms handler for processing wish lists.
 */
function wishListForm() {
    var productList = require('~/cartridge/scripts/model/ProductList').get();
    var formResult = wishlistForm.handleAction({
        'addGiftCertificate'     : function (formgroup) {
            var AddGiftCertificateToProductListResult = new dw.system.Pipelet('AddGiftCertificateToProductList')
                    .execute({
                        ProductList : productList.object,
                        Priority : 0
                    });
        },
        'deleteItem'     : function (formgroup, action) {
            dw.system.Logger.info('Deleting product {0} from wishlist.',action.object.productID);
            productList.remove(action.object);
        },
        'updateItem'     : function (formgroup, action) {
            dw.system.Logger.info('Updating product {0} on wishlist.',action.object.productID);
            Form.get(action.parent).copyTo(action.object);
        },
        'setItemPrivate' : function(formgroup, action){
            Transaction.wrap(function () {
                  action.object.public = false;
            });
        },
        'setItemPublic' : function(formgroup, action){
            Transaction.wrap(function () {
                  action.object.public = true;
            });
        },
        'setListPrivate' : function(){
            dw.system.Logger.info('Customer {0} set wishlist private.',customer.ID);
            productList.setPublic(true);
        },
        'setListPublic' : function(){
            dw.system.Logger.info('Customer {0} set wishlist public.',customer.ID);
            productList.setPublic(false);
        }
    });

    // @TODO move these last two action into wishlistForm.handleAction()
    var TriggeredAction = request.triggeredFormAction;
    if (TriggeredAction !== null)
    {
        if (TriggeredAction.formId === 'addToCart')
        {
            if (currentForms.wishlist.items.triggeredFormAction.parent.object.type === currentForms.wishlist.items.triggeredFormAction.parent.object.TYPE_GIFT_CERTIFICATE)
            {
                // TODO redirect?
                var GiftCertController = require('./GiftCert');
                GiftCertController.Purchase();
                return;
            }
            else
            {
                // TODO redirect?
                var CartController = require('./Cart');
                CartController.AddProduct();
                return;
            }
        }
        else if (TriggeredAction.formId === 'selectAddressWishlist')
        {
            SetShippingAddress();
            return;
        }
        else if (TriggeredAction.formId === 'setItemPrivate')
        {
            Transaction.wrap(function () {
                         ProductList.public = false;
                    }
                );
        }
        else if (TriggeredAction.formId === 'setItemPublic')
        {
            Transaction.wrap(function () {
                          TriggeredAction.object.public = true;
                    }
                );
        }
        else if (TriggeredAction.formId === 'setListPrivate')
        {
            var ProductList = ProductList.get();

            Transaction.wrap(function () {
                         ProductList.public = false;
                    }
                );

            var items = ProductList.items.iterator();
		    var anItem = null;
		    while( items.hasNext() ) {
		    	anItem = items.next();
		    	anItem.setPublic(false);
		    }
        }
        else if (TriggeredAction.formId === 'setListPublic')
        {
            var ProductList = ProductList.get();

            
            Transaction.wrap(function () {
                         ProductList.public = true;
                    }
                );

            var items = ProductList.items.iterator();
		    var anItem = null;
		    while( items.hasNext() ) {
		    	anItem = items.next();
		    	anItem.setPublic(true);
		    }
        }
    }

    response.redirect(dw.web.URLUtils.https('Wishlist-Show'));
}


/**
 * Expects: UserID
 */
function showOther() {
    Form.get('wishlist.send').clear();

    var productList = ProductList.get();

    view.get({
        ProductList : productList.object
    }).render('account/wishlist/wishlist');
}


/**
 * Expects: Product or ProductID or pid
 */
// this is called from the cart
function addProduct(args) {
    var currentHttpParameterMap = request.httpParameterMap;


    // TODO var Product = args.Product;
    var product = null;

    var product = Product.get(request.httpParameterMap.pid.stringValue).object;
    var productOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(product, request.httpParameterMap).ProductOptionModel;


    var productList = ProductList.get();

	productList.addProduct(product, currentHttpParameterMap.Quantity.doubleValue, productOptionModel);


    return {
        ok : true
    };
}


/**
 * Adds a product given by the http parameter "pid" to the wishlist and displays
 * the updated wishlist.
 */
function add() {
    var product = Product.get(request.httpParameterMap.pid.stringValue).object;
    var productOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(product, request.httpParameterMap).ProductOptionModel;

    var productList = ProductList.get();
    productList.addProduct(product, 1, productOptionModel);

    response.redirect(dw.web.URLUtils.https('Wishlist-Show'));
}


/**
 * Expects (optional): - OwnerEmail - OwnerFirstName - OwnerLastName
 */
function search() {
    var form = session.forms.wishlist.search;

    var searchFirstName, searchLastName, searchEmail = null;

    searchFirstName = form.firstname.value;
    searchLastName = form.lastname.value;
    searchEmail = form.email.value;

    if (form.valid && (!empty(searchFirstName) || (!empty(searchLastName) && !empty(searchEmail))))
    {
        var queryString = 'OwnerFirstName = ' + searchFirstName + ' AND OwnerLastName = ' +
            searchLastName + ' AND OwnerEmail = ' + searchEmail;
        var productLists = dw.customer.ProductListMgr.queryProductLists(queryString, null, null);

        Form.get('wishlist.productlists').copyFrom(productLists);

        Form.get(form).clear();
    }

    view.get().render('account/wishlist/wishlistresults', {
        SearchFirstName : searchFirstName,
        SearchLastName : searchLastName,
        SearchEmail : searchEmail
    });
}


/**
 * Set the shipping address for the wish list. Expects: AddressID
 */
function setShippingAddress() {
    var currentHttpParameterMap = request.httpParameterMap;

    var address = null;


    if (!currentHttpParameterMap.AddressID.empty || !currentHttpParameterMap.editAddress.empty)
    {
        var GetCustomerAddressResult = dw.customer.AddressBook.getAddress(empty(currentHttpParameterMap.AddressID.stringValue) ? currentHttpParameterMap.editAddress.stringValue
                            : currentHttpParameterMap.AddressID.stringValue);


        address = GetCustomerAddressResult.Address;
    }


    var ProductList = ProductList.get();
    Transaction.wrap(function () {
         ProductList.setShippingAddress(address);
    });
    response.redirect(dw.web.URLUtils.https('Wishlist-Show'));
}


/**
 * Replaces an item in the wish list.
 */
function replaceProductListItem() {
    var plid = request.httpParameterMap.uuid.stringValue;

    var ProductList = ProductList.get();


    var productListItem = ProductList.getItem(plid);
    if (productListItem !== null)
    {

        Transaction.wrap(function () {
            ProductList.removeItem(productListItem);

	        // TODO ProductList already resolved
	        var result = addProduct();
        });
    }

    // TODO rendering an empty template this seems pretty useless
    view.get().render('account/wishlist/refreshwishlist');
}

/*
 * Module exports
 */

/*
 * Web exposed methods
 */
// own wishlist
/** @see module:controllers/Whishlist~Add */
exports.Add = guard.ensure(['get', 'https', 'loggedIn'], add);
/** @see module:controllers/Whishlist~Show */
exports.Show = guard.ensure(['get', 'https', 'loggedIn'], show);
/** @see module:controllers/Whishlist~ReplaceProductListItem */
exports.ReplaceProductListItem = guard.ensure(['get', 'https', 'loggedIn'], replaceProductListItem);
/** @see module:controllers/Whishlist~SetShippingAddress */
exports.SetShippingAddress = guard.ensure(['get', 'https', 'loggedIn'], setShippingAddress);

// others wishlist
/** @see module:controllers/Whishlist~Search */
exports.Search                  = guard.ensure(['post', 'https'], search);
/** @see module:controllers/Whishlist~ShowOther */
exports.ShowOther               = guard.ensure(['get', 'https'], showOther);

// form handlers
/** @see module:controllers/Whishlist~LandingForm */
exports.LandingForm             = guard.ensure(['post', 'https'], landingForm);
/** @see module:controllers/Whishlist~WishListForm */
exports.WishListForm            = guard.ensure(['post', 'https', 'loggedIn'], wishListForm);

/*
 * Local methods
 */
exports.AddProduct              = addProduct;