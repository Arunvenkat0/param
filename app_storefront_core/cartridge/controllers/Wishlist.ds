'use strict';

/**
 * Controller : wishlist
 *
 * @module controller/Whishlist
 */

/* API Includes */
var Transaction = require('dw/system/Transaction');
var Wishlist = require('~/cartridge/scripts/model/Wishlist');
var Product = require('~/cartridge/scripts/model/Product');
var ProductList = require('~/cartridge/scripts/model/ProductList');

/* Script Modules */
var accountLogin = require('~/cartridge/scripts/model/Content').get('myaccount-login');
var wishlistAsset = require('~/cartridge/scripts/model/Content').get('myaccount-wishlist');
var guard = require('~/cartridge/scripts/guard');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');
var Form = require('~/cartridge/scripts/model/Form');
var wishlistForm = Form.get('wishlist');

/**
 * Forms handling for the landing page
 */
function LandingForm()
{  
    var formResult = wishlistForm.handleAction({
        'register'             : function (formgroup) {
           response.redirect(dw.web.URLUtils.https('Account-StartRegister'));
           return;
        },
        'search'             : function (formgroup) {
            Search();
            return;
        }    
    });
}


/**
 * Renders the wishlist page.
 */
function Show()
{
    pageMeta.update(wishlistAsset);

    wishlistForm.clear();

    var productList = ProductList.get();
    wishlistForm.get('items').copyFrom(productList.object.items);
    // init address book
    wishlistForm.get('addressbook').get('addresses').copyFrom(customer.profile.addressBook.addresses);

    view.get().render('account/wishlist/wishlist', {
        ProductList : productList
    });
}


/**
 * Forms handler for processing wish lists.
 */
function WishListForm()
{
    var productList = ProductList.get();
    var formResult = wishlistForm.handleAction({
        'addGiftCertificate'     : function (formgroup) {
            var AddGiftCertificateToProductListResult = new dw.system.Pipelet('AddGiftCertificateToProductList')
                    .execute({
                        ProductList : productList.object,
                        Priority : 0
                    });
        },
        'deleteItem'     : function (formgroup) {
            productList.remove(request.triggeredFormAction.object);
        },
        'updateItem'     : function (formgroup) {
            Form.get(request.triggeredFormAction.parent).copyTo(request.triggeredFormAction.object);
        }
    });


    var TriggeredAction = request.triggeredFormAction;
    if (TriggeredAction !== null)
    {
        if (TriggeredAction.formId === 'addToCart')
        {
            if (CurrentForms.wishlist.items.triggeredFormAction.parent.object.type === CurrentForms.wishlist.items.triggeredFormAction.parent.object.TYPE_GIFT_CERTIFICATE)
            {
                // TODO redirect?
                var GiftCertController = require('./GiftCert');
                GiftCertController.Purchase();
                return;
            }
            else
            {
                // TODO redirect?
                var CartController = require('./Cart');
                CartController.AddProduct();
                return;
            }
        }
        else if (TriggeredAction.formId === 'selectAddressWishlist')
        {
            SetShippingAddress();
            return;
        }
        else if (TriggeredAction.formId === 'setItemPrivate')
        {
            Transaction.begin();

            TriggeredAction.object.public = false;

            Transaction.commit();
        }
        else if (TriggeredAction.formId === 'setItemPublic')
        {
            Transaction.begin();

            TriggeredAction.object.public = true;

            Transaction.commit();
        }
        else if (TriggeredAction.formId === 'setListPrivate')
        {
            var ProductList = Wishlist.fetchWishList();

            Transaction.begin();

            ProductList.public = false;

            Transaction.commit();


            new dw.system.Pipelet('Script', {
                Transactional : true,
                OnError : 'PIPELET_ERROR',
                ScriptFile : 'productlist/MakeItemsPrivate.ds'
            }).execute({
                ProductList : ProductList
            });
        }
        else if (TriggeredAction.formId === 'setListPublic')
        {
            var ProductList = Wishlist.fetchWishList();

            Transaction.begin();

            ProductList.public = true;

            Transaction.commit();

            new dw.system.Pipelet('Script', {
                Transactional : true,
                OnError : 'PIPELET_ERROR',
                ScriptFile : 'productlist/MakeItemsPublic.ds'
            }).execute({
                ProductList : ProductList
            });
        }
    }

    response.redirect(dw.web.URLUtils.https('Wishlist-Show'));
}


/**
 * Expects: UserID
 */
function ShowOther()
{
    var CurrentHttpParameterMap = request.httpParameterMap;
    var CurrentForms = session.forms;
    
    CurrentForms.wishlist.send.clearFormElement();

    var ProductList = null;

    var GetProductListResult = new dw.system.Pipelet('GetProductList', {
        Create : false
    }).execute({
        ProductListID : CurrentHttpParameterMap.WishListID.value
    });
    if (GetProductListResult.result == PIPELET_NEXT)
    {
        ProductList = GetProductListResult.ProductList;

		Form.get(CurrentForms.wishlist.items).copyFrom(ProductList.items);
    }

    view.get().render('account/wishlist/wishlist', {
        ProductList : productList
    });
}


/**
 * Expects: Product or ProductID or pid
 */
// this is called from the cart
function AddProduct(args)
{
    var CurrentHttpParameterMap = request.httpParameterMap;


    // TODO var Product = args.Product;
    var product = null;

    if (product == null)
    {
        if (CurrentHttpParameterMap.pid.stringValue != null)
        {
            var ProductID = CurrentHttpParameterMap.pid.stringValue;


            var GetProductResult = new dw.system.Pipelet('GetProduct').execute({
                ProductID : ProductID
            });
            if (GetProductResult.result == PIPELET_ERROR)
            {
                return {
                    error : true
                };
            }
            product = GetProductResult.Product;
        }
    }


    var UpdateProductOptionSelectionsResult = new dw.system.Pipelet('UpdateProductOptionSelections').execute({
        Product : product
    });
    var ProductOptionModel = UpdateProductOptionSelectionsResult.ProductOptionModel;


    var ProductList = Wishlist.fetchWishList();


    new dw.system.Pipelet('AddProductToProductList').execute({
        Product : product,
        ProductList : ProductList,
        Quantity : CurrentHttpParameterMap.Quantity.doubleValue,
        ProductOptionModel : ProductOptionModel
    });

    return {
        ok : true
    };
}


/**
 * Adds a product given by the http parameter "pid" to the wishlist and displays
 * the updated wishlist.
 */
function Add()
{
    var product = Product.get(request.httpParameterMap.pid.stringValue).object;
    var productOptionModel = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(product, request.httpParameterMap).ProductOptionModel;

    var productList = ProductList.get();
    productList.addProduct(product, 1, productOptionModel);

    Show();
}


/**
 * Expects (optional): - OwnerEmail - OwnerFirstName - OwnerLastName
 */
function Search()
{
    var CurrentForms = session.forms;

    var SearchFirstName, SearchLastName, SearchEmail = null;

    if (CurrentForms.wishlist.search.valid
            && (!empty(CurrentForms.wishlist.search.email.value) || (!empty(CurrentForms.wishlist.search.firstname.value) && !empty(CurrentForms.wishlist.search.lastname.value))))
    {
        var SearchProductListsResult = new dw.system.Pipelet('SearchProductLists', {
            PublicOnly : true
        }).execute({
            Type : dw.customer.ProductList.TYPE_WISH_LIST,
            OwnerFirstName : CurrentForms.wishlist.search.firstname.value,
            OwnerLastName : CurrentForms.wishlist.search.lastname.value,
            OwnerEmail : CurrentForms.wishlist.search.email.value
        });
        var ProductLists = SearchProductListsResult.ProductLists;

        Form.get(CurrentForms.wishlist.productlists).copyFrom(ProductLists);

        SearchFirstName = CurrentForms.wishlist.search.firstname.value;
        SearchLastName = CurrentForms.wishlist.search.lastname.value;
        SearchEmail = CurrentForms.wishlist.search.email.value;


        CurrentForms.wishlist.search.clearFormElement();
    }
    else
    {
        SearchFirstName = CurrentForms.wishlist.search.firstname.value;
        SearchLastName = CurrentForms.wishlist.search.lastname.value;
        SearchEmail = CurrentForms.wishlist.search.email.value;
    }

    view.get().render('account/wishlist/wishlistresults', {
        SearchFirstName : SearchFirstName,
        SearchLastName : SearchLastName,
        SearchEmail : SearchEmail
    });
}


/**
 * Set the shipping address for the wish list. Expects: AddressID
 */
function SetShippingAddress()
{
    var CurrentHttpParameterMap = request.httpParameterMap;

    var Address = null;


    if (!CurrentHttpParameterMap.AddressID.empty || !CurrentHttpParameterMap.editAddress.empty)
    {
        var GetCustomerAddressResult = new dw.system.Pipelet('GetCustomerAddress')
                .execute({
                    AddressID : empty(CurrentHttpParameterMap.AddressID.stringValue) ? CurrentHttpParameterMap.editAddress.stringValue
                            : CurrentHttpParameterMap.AddressID.stringValue,
                    Customer : customer
                });
        if (GetCustomerAddressResult.result == PIPELET_ERROR)
        {
            return;
        }
        Address = GetCustomerAddressResult.Address;
    }


    var ProductList = Wishlist.fetchWishList();

    Transaction.begin();
    
    ProductList.setShippingAddress(Address);

    Transaction.commit();
    
    Show();
}


/**
 * Replaces an item in the wish list.
 */
function ReplaceProductListItem()
{
    var plid = request.httpParameterMap.uuid.stringValue;

    var ProductList = Wishlist.fetchWishList();


    var productListItem = ProductList.getItem(plid);
    if (productListItem != null)
    {
        Transaction.begin();
    
        ProductList.removeItem(productListItem);

        // TODO ProductList already resolved
        var AddProductResult = AddProduct();

        Transaction.commit();
    }

    // TODO rendering an empty template this seems pretty useless
    view.get().render('account/wishlist/refreshwishlist');
}

/**
 * A guard function which ensures that the user is logged in before the action can be executed.
 */
function loggedIn(action)
{
    return function()
    {
        if (!customer.authenticated)
        {
            requireLogin({
                TargetAction : 'Wishlist-' + action.name
            });
            return;
        }

        action();
    };
}
		
/**
 * Contains the login procedure specific for the wishlist.
 */
// TODO this is called from the cart when a product is added to the wishlist
function requireLogin(args)
{
    clearForms();

    var loginForm = session.forms.login;

    if (customer.registered)
    {
        loginForm.username.value = customer.profile.credentials.login;
        loginForm.rememberme.value = true;
    }

	pageMeta.update(accountLogin);

    loginForm.targetAction.value = args.TargetAction;
    loginForm.targetParameters.value = (args.TargetParameters != null) ? JSON.stringify(args.TargetParameters) : null;

    response.renderTemplate('account/wishlist/wishlistlanding', {
        RegistrationStatus : false
    });
}

function clearForms()
{
    var CurrentForms = session.forms;

    CurrentForms.wishlist.clearFormElement();
    CurrentForms.login.clearFormElement();
}

/*
 * Module exports
 */

/*
 * Web exposed methods
 */
// own wishlist
/** @see module:controller/Whishlist~Add */
exports.Add = guard.ensure(['get', 'https'], loggedIn(Add));
/** @see module:controller/Whishlist~Show */
exports.Show = guard.ensure(['get', 'https'], loggedIn(Show));
/** @see module:controller/Whishlist~ReplaceProductListItem */
exports.ReplaceProductListItem = guard.ensure(['get', 'https'], loggedIn(ReplaceProductListItem));
/** @see module:controller/Whishlist~SetShippingAddress */
exports.SetShippingAddress = guard.ensure(['get', 'https'], loggedIn(SetShippingAddress));

// others wishlist
/** @see module:controller/Whishlist~Search */
exports.Search                  = guard.ensure(['get', 'https'], Search);
/** @see module:controller/Whishlist~ShowOther */
exports.ShowOther               = guard.ensure(['get', 'https'], ShowOther);

// form handlers
/** @see module:controller/Whishlist~LandingForm */
exports.LandingForm             = guard.ensure(['post', 'https'], LandingForm);
/** @see module:controller/Whishlist~WishListForm */
exports.WishListForm            = guard.ensure(['post', 'https'], loggedIn(WishListForm));

/*
 * Local methods
 */
exports.AddProduct              = AddProduct;