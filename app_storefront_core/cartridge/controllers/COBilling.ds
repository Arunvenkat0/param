'use strict';

/**
 * This controller implements the billing logic. It is used by both the single shipping and the multi shipping
 * scenario and is responsible for providing the payment method selection as well as entering a billing address.
 *
 * @module controller/COBilling
 */

/* API Includes */
var Cart = require('~/cartridge/scripts/model/Cart');
var Form = require('~/cartridge/scripts/model/Form');
var GiftCertificate = require('dw/order/GiftCertificate');
var GiftCertificateMgr = require('dw/order/GiftCertificateMgr');
var GiftCertificateStatusCodes = require('dw/order/GiftCertificateStatusCodes');
var PaymentInstrument = require('dw/order/PaymentInstrument');
var PaymentMgr = require('dw/order/PaymentMgr');
var PaymentProcessor = require('~/cartridge/scripts/model/PaymentProcessor');
var ProductListMgr = require('dw/customer/ProductListMgr');
var Profile = require('~/cartridge/scripts/model/Profile');
var Resource = require('dw/web/Resource');
var Status = require('dw/system/Status');
var Transaction = require('dw/system/Transaction');

/* Script Modules */
var billingForm = require('~/cartridge/scripts/model/Form').get('billing');
var billingAddressForm = require('~/cartridge/scripts/model/Form').get('billingaddress');
var guard = require('~/cartridge/scripts/guard');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');

/**
 * Starting point for billing. After a successful shipping setup both COShipping
 * and COShippingMultiple jump to this node.
 */
function Start() {
    var cart = Cart.get();

    if (cart.object) {

        // Initializes all forms of the billing page including: - address form - email address - coupon form
        initAddressForm(cart);
        initEmailAddress(cart);

        var applicablePaymentMethods = initCreditCardList(cart).ApplicablePaymentMethods;

        if (session.forms.billing.paymentMethods.valid) {
            session.forms.billing.paymentMethods.selectedPaymentMethodID.setOptions(applicablePaymentMethods.iterator());
        }
        else {
            session.forms.billing.paymentMethods.clearFormElement();
        }

        session.forms.billingcoupon.clearFormElement();
        session.forms.billinggiftcert.clearFormElement();

        start(cart);
    }
    else {
        require('./Cart').Show();
        return;
    }
}

/**
 * TODO
 * @param cart
 */
function start(cart) {

    require('./COShipping').PrepareShipments();

    Transaction.wrap(function () {
        cart.calculate();
    });

    pageMeta.update({pageTitle : Resource.msg('billing.meta.pagetitle', 'checkout', 'SiteGenesis Checkout')});
    returnToForm(cart);
}

/**
 * TODO
 * @param cart
 */
function returnToForm(cart, params) {

    if (!empty(cart.getPaymentInstrument()) && cart.getPaymentInstrument().getPaymentMethod() === PaymentInstrument.METHOD_GIFT_CERTIFICATE) {
        Form.get(session.forms.billing).copyFrom({
            giftCertCode : cart.getPaymentInstrument().getGiftCertificateCode()
        });
    }

    pageMeta.update({pageTitle : Resource.msg('billing.meta.pagetitle', 'checkout', 'SiteGenesis Checkout')});

    if (params) {
        view.get(require('~/object').extend(params, {Basket : cart.object})).render('checkout/billing/billing');
    }
    else {
        view.get({Basket : cart.object}).render('checkout/billing/billing');
    }
}

/**
 * TODO
 */
function billing() {

    billingForm.handleAction({
        'applyCoupon'      : function (formgroup) {
            var couponCode = request.httpParameterMap.couponCode.stringValue || request.httpParameterMap.dwfrm_billing_couponCode.stringValue;

            // TODO what happened to this start node?
            require('./Cart').AddCoupon(couponCode);

            handleCoupon();
            return;
        },
        'creditCardSelect' : function (formgroup) {
            updateCreditCardSelection();
            return;
        },
        'paymentSelect'    : function (formgroup) {
            var selectedPaymentID = request.httpParameterMap.dwfrm_billing_paymentMethods_selectedPaymentMethodID.stringValue;
            // ToDo - pass parameter ?
            Start();
            return;
        },
        'redeemGiftCert'   : function (formgroup) {
            var status = redeemGiftCertificate(session.forms.billing.giftCertCode.htmlValue);
            if (!status.isError()) {
                returnToForm(Cart.get(), {NewGCPaymentInstrument : status.getDetail("NewGCPaymentInstrument")});
            }
            else {
                returnToForm(Cart.get());
            }

            return;
        },
        'save'             : function (formgroup) {
            var cart = Cart.get();

            if (!resetPaymentForms() || !validateBilling() || !handleBillingAddress(cart) || // Performs validation steps, based upon the entered billing address and address options.
                handlePaymentSelection(cart).error) { // Performs payment method specific checks, such as credit card verification.
                returnToForm(cart);
            }
            else {

                if (customer.authenticated && session.forms.billing.billingAddress.addToAddressBook.value) {
                    Profile.get(customer.profile).addAddressToAddressBook(cart.getBillingAddress());
                }

                // Mark step as fulfilled
                session.forms.billing.fulfilled.value = true;

                // A successful billing page will jump to the next checkout step.
                require('./COSummary').Start();
                return;
            }
        },
        'selectAddress'    : function (formgroup) {
            updateAddressDetails();
            return;
        }
    });
}

/**
 * Initializes the address form: - if customer chose option "use as billing
 * address" on single shipping page the form is prepopulated with the shipping
 * address, otherwise - prepopulate with already set billing address, otherwise -
 * prepopulate with default address of authenticated customer
 */
function initAddressForm(cart) {

    if (session.forms.singleshipping.shippingAddress.useAsBillingAddress.value == true) {
        session.forms.billing.billingAddress.addressFields.firstName.value = session.forms.singleshipping.shippingAddress.addressFields.firstName.value;
        session.forms.billing.billingAddress.addressFields.lastName.value = session.forms.singleshipping.shippingAddress.addressFields.lastName.value;
        session.forms.billing.billingAddress.addressFields.address1.value = session.forms.singleshipping.shippingAddress.addressFields.address1.value;
        session.forms.billing.billingAddress.addressFields.address2.value = session.forms.singleshipping.shippingAddress.addressFields.address2.value;
        session.forms.billing.billingAddress.addressFields.city.value = session.forms.singleshipping.shippingAddress.addressFields.city.value;
        session.forms.billing.billingAddress.addressFields.postal.value = session.forms.singleshipping.shippingAddress.addressFields.postal.value;
        session.forms.billing.billingAddress.addressFields.phone.value = session.forms.singleshipping.shippingAddress.addressFields.phone.value;
        session.forms.billing.billingAddress.addressFields.states.state.value = session.forms.singleshipping.shippingAddress.addressFields.states.state.value;
        session.forms.billing.billingAddress.addressFields.country.value = session.forms.singleshipping.shippingAddress.addressFields.country.value;
        session.forms.billing.billingAddress.addressFields.phone.value = session.forms.singleshipping.shippingAddress.addressFields.phone.value;
    }
    else if (cart.getBillingAddress() != null) {

        Form.get(session.forms.billing.billingAddress.addressFields).copyFrom(cart.getBillingAddress());
        Form.get(session.forms.billing.billingAddress.addressFields.states).copyFrom(cart.getBillingAddress());
    }
    else if (customer.authenticated && customer.profile.addressBook.preferredAddress != null) {

        Form.get(session.forms.billing.billingAddress.addressFields).copyFrom(customer.profile.addressBook.preferredAddress);
        Form.get(session.forms.billing.billingAddress.addressFields.states).copyFrom(customer.profile.addressBook.preferredAddress);
    }
}

/**
 * initializes the email address form field: - if there's already a customer
 * email set at the basket this email address is taken, otherwise - if the
 * current customer is authenticated the email address of the customer's profile
 * is taken
 */
function initEmailAddress(cart) {
    if (cart.getCustomerEmail() != null) {
        session.forms.billing.billingAddress.email.emailAddress.value = cart.getCustomerEmail();
    }
    else if (customer.authenticated && customer.profile.email != null) {
        session.forms.billing.billingAddress.email.emailAddress.value = customer.profile.email;
    }
}

/**
 * Initializes the credit card list by determining the saved customer payment
 * instruments of type credit card.
 */
function initCreditCardList(cart) {

    var paymentAmount = cart.getNonGiftCertificateAmount();

    var countryCode = session.forms.billing.billingAddress.addressFields.country.value;
    var applicablePaymentMethods = PaymentMgr.getApplicablePaymentMethods(customer, countryCode, paymentAmount.value);
    var applicablePaymentCards = PaymentMgr.getPaymentMethod(PaymentInstrument.METHOD_CREDIT_CARD).getApplicablePaymentCards(customer, countryCode, paymentAmount.value);

    session.forms.billing.paymentMethods.creditCard.type.setOptions(applicablePaymentCards.iterator());

    var applicableCreditCards = null;

    if (customer.authenticated) {
        applicableCreditCards =
            Profile.get().validateWalletPaymentInstruments(countryCode, paymentAmount.getValue()).ValidPaymentInstruments;
    }

    return {
        ApplicablePaymentMethods : applicablePaymentMethods,
        ApplicableCreditCards    : applicableCreditCards
    };
}

/**
 * Adjust gift certificate redemptions as after applying coupon(s), order total
 * is changed. AdjustGiftCertificate pipeline removes and then adds currently
 * added gift certificates to reflect order total changes.
 */
function adjustGiftCertificates() {
    var cart = Cart.get();

    if (cart.object) {
        var gcIdList = cart.getGiftCertIdList();

        Transaction.wrap(function () {
            for (var i = 0; i < gcIdList.length; i++) {
                cart.removeGiftCertificatePaymentInstrument(gcIdList[i]);
            }

            var gcID = null;

            for (var j = 0; j < gcIdList.length; j++) {
                var gcID = gcIdList[j];

                var gc = GiftCertificateMgr.getGiftCertificateByCode(gcID);

                if (gc && // make sure exists
                    gc.isEnabled() &&  // make sure it is enabled
                    (gc.getStatus() !== GiftCertificate.STATUS_PENDING) && // make sure it is available for use
                    (gc.getStatus() !== GiftCertificate.STATUS_REDEEMED) && // make sure it has not been fully redeemed
                    gc.balance.currencyCode === cart.getCurrencyCode()) { // make sure the GC is in the right currency

                    cart.createGiftCertificatePaymentInstrument(gc);
                }
            }
        });

        return;
    }
    else {
        return;
    }
}

/**
 * Attempts to redeem a gift certificate. If the gift certificate wasn't
 * redeemed, the form field is invalidated with the appropriate error message.
 * If the gift certificate was redeemed, the form gets cleared. This start node
 * is called by an Ajax request and generates a JSON response.
 */
function redeemGiftCertificate(giftCertCode) {

    var cart = Cart.get();

    if (cart.object) {
        // fetch the gift certificate
        var gc = GiftCertificateMgr.getGiftCertificateByCode(giftCertCode);

        if (!gc) { // make sure exists
            return new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_NOT_FOUND);
        }
        else if (!gc.isEnabled()) { // make sure it is enabled
            return new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_DISABLED);
        }
        else if (gc.getStatus() === GiftCertificate.STATUS_PENDING) { // make sure it is available for use
            return new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_PENDING);
        }
        else if (gc.getStatus() === GiftCertificate.STATUS_REDEEMED) { // make sure it has not been fully redeemed
            return new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_INSUFFICIENT_BALANCE);
        }
        else if (!(gc.balance.currencyCode === cart.getCurrencyCode())) {// make sure the GC is in the right currency
            return new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_CURRENCY_MISMATCH);
        }
        else {
            var newGCPaymentInstrument = Transaction.wrap(function () {
                var gcPaymentInstrument = cart.createGiftCertificatePaymentInstrument(gc);
                cart.calculate();
                return gcPaymentInstrument;
            });

            var status = new Status(Status.OK);
            status.addDetail("NewGCPaymentInstrument", newGCPaymentInstrument);
            return status;
        }
    }
    else {
        return new Status(Status.ERROR, 'BASKET_NOT_FOUND');
    }
}

/**
 * TODO
 */
function redeemGiftCertificateJson() {
    var giftCertCode = request.httpParameterMap.giftCertCode.stringValue;
    var giftCertStatus = redeemGiftCertificate(giftCertCode);

    if (request.httpParameterMap.format.stringValue != 'ajax') {
        // TODO empty response?
        // TODO we could also build an ajax guard?
        return;
    }

    var ResourceProperty = 'billing.' + giftCertStatus.code;

    response.renderJSON({
        status  : giftCertStatus.code,
        success : !giftCertStatus.error,
        message : dw.web.Resource.msgf(ResourceProperty, 'checkout', null, giftCertCode),
        code    : giftCertCode
    });
}

/**
 * Attempts to remove a gift certificate from the basket payment instruments and
 * generates a JSON response with a status. This start node is called by an Ajax
 * request.
 */
function removeGiftCertificate() {
    if (!empty(request.httpParameterMap.giftCertificateID.stringValue)) {
        var cart = Cart.get();

        Transaction.wrap(function () {
            cart.removeGiftCertificatePaymentInstrument(request.httpParameterMap.giftCertificateID.stringValue);
            cart.calculate();
        });
    }

    Start();
}

/**
 * Renders the order summary including mini cart order totals and shipment
 * summary. This is used to update the order totals in the UI based on the
 * recalculated basket after a coupon code has been applied.
 */
function updateSummary() {

    var cart = Cart.get();

    Transaction.wrap(function () {
        cart.calculate();
    });

    view.get({
        checkoutstep : 4,
        Basket       : cart.object
    }).render('checkout/minisummary');
}

/**
 * TODO
 */
function updateAddressDetails() {

    var cart = Cart.get();

    if (cart.object) {

        var address = customer.getAddressBook().getAddress(empty(request.httpParameterMap.addressID.value) ? request.httpParameterMap.dwfrm_billing_addressList.value : request.httpParameterMap.addressID.value);

        Form.get(session.forms.billing.billingAddress.addressFields).copyFrom(address);
        Form.get(session.forms.billing.billingAddress.addressFields.states).copyFrom(address);

        var billingAddress = cart.getBillingAddress();

        billingAddress && Form.get(session.forms.billing.billingAddress.addressFields).copyTo(billingAddress);

        initCreditCardList(cart);
        start(cart);
    }
    else {
        require('./Cart').Show();
        return;
    }
}

/**
 * TODO
 */
function handleCoupon() {
    if (empty(CouponError)) {
        /*
         * Adjust gift certificate redemptions as after applying coupon(s),
         * order total is changed. AdjustGiftCertificate pipeline removes and
         * then adds currently added gift certificates to reflect order total
         * changes.
         */
        adjustGiftCertificates();
    }

    returnToForm(Cart.get());
}

/**
 * Renders a form dialog to edit an address. The dialog is supposed to be opened
 * by an Ajax request and ends in templates, which just trigger a certain JS
 * event. The calling page of this dialog is responsible for handling these
 * events.
 */
function editAddress() {

    session.forms.billingaddress.clearFormElement();

    var address = customer.getAddressBook().getAddress(request.httpParameterMap.addressID.stringValue);

    if (address) {
        Form.get(session.forms.billingaddress).copyFrom(address);
        Form.get(session.forms.billingaddress.states).copyFrom(address);
    }

    view.get().render('checkout/billing/billingaddressdetails');
}

/**
 * TODO
 */
function editBillingAddress() {

    billingAddressForm.handleAction({
        'apply'  : function (formgroup) {
            if (!Form.get(session.forms.billingaddress).copyTo(session.forms.billingaddress.object)) {
                view.get().render('checkout/billing/billingaddressdetails');
                return;
            }
            else {
                view.get().render('components/dialog/dialogapply');
                return;
            }
        },
        'remove' : function (formgroup) {
            if (ProductListMgr.getProductLists(session.forms.billingaddress.object).isEmpty()) {
                customer.getAddressBook().removeAddress(session.forms.billingaddress.object);
                view.get().render('components/dialog/dialogdelete');
                return;
            }
            else {
                view.get().render('checkout/billing/billingaddressdetails');
                return;
            }
        }
    });
}

/**
 * Handles the selection of the payment method and performs payment method
 * specific validation and verification upon the entered form fields. If the
 * order total is 0 (in case user has product promotions etc.) then we do not
 * need a valid payment method.
 */
function handlePaymentSelection(cart) {

    if (empty(session.forms.billing.paymentMethods.selectedPaymentMethodID.value)) {
        if (cart.getTotalGrossPrice() > 0) {
            return {
                error : true
            };
        }
        else {
            return {
                ok : true
            };
        }
    }

    // skip the payment handling if the whole payment was made using gift cert
    if (session.forms.billing.paymentMethods.selectedPaymentMethodID.value.equals(PaymentInstrument.METHOD_GIFT_CERTIFICATE)) {
        return {
            ok : true
        };
    }

    if (empty(PaymentMgr.getPaymentMethod(session.forms.billing.paymentMethods.selectedPaymentMethodID.value).paymentProcessor)) {
        return {
            error                   : true,
            MissingPaymentProcessor : true
        };
    }

    /*
     * The Handle Pipeline is being dynamically called based on a concatenation
     * of the current Payment-Processor and a constant suffix(-Handle).
     *
     * For example: Credit Cards processor ID = BASIC_CREDIT Handle Pipeline =
     * BASIC_CREDIT-Handle
     *
     * The handle pipeline is responsible for payment provider / payment method
     * specific form validation and payment instrument creation.
     */
	return PaymentProcessor.handle(cart.object, session.forms.billing.paymentMethods.selectedPaymentMethodID.value);
}

/**
 * Returns information of a gift certificate including its balance as JSON
 * response. Required to check the remaining balance.
 */
function getGiftCertificateBalance() {
    var giftCertificate = GiftCertificateMgr.getGiftCertificateByCode(request.httpParameterMap.giftCertificateID.value);

    if (giftCertificate && giftCertificate.isEnabled()) {
        response.renderJSON({
            ID      : giftCertificate.getGiftCertificateCode(),
            balance : dw.util.StringUtils.formatMoney(giftCertificate.getBalance())
        });
    }
    else {
        response.renderJSON({
            error : dw.web.Resource.msg('billing.giftcertinvalid', 'checkout', null)
        });
    }
}

/**
 * Selects a customer credit card and returns the details of the credit card as
 * JSON response. Required to fill credit card form with details of selected
 * credit card.
 */
function selectCreditCard() {

    var cart = Cart.get();

    var applicableCreditCards = initCreditCardList(cart).ApplicableCreditCards;
    var selectedCreditCard = null;

    // ensure mandatory parameter 'CreditCardUUID' and 'CustomerPaymentInstruments'
    // in pipeline dictionary and collection is not empty
    if (request.httpParameterMap.creditCardUUID.value && applicableCreditCards && !applicableCreditCards.empty) {

        // find credit card in payment instruments
        var instrumentsIter = applicableCreditCards.iterator();
        while (instrumentsIter.hasNext()) {
            var creditCardInstrument = instrumentsIter.next();
            if (request.httpParameterMap.creditCardUUID.value.equals(creditCardInstrument.UUID)) {
                selectedCreditCard = creditCardInstrument;
            }
        }

        if (selectedCreditCard) {
            session.forms.billing.paymentMethods.creditCard.number.value = selectedCreditCard.getCreditCardNumber();
        }
    }

    view.get({
        SelectedCreditCard : selectedCreditCard
    }).render('checkout/billing/creditcardjson');
}

/**
 * TODO
 */
function updateCreditCardSelection() {
    var cart = Cart.get();

    var applicableCreditCards = initCreditCardList(cart).ApplicableCreditCards;

    var UUID = request.httpParameterMap.creditCardUUID.value ? request.httpParameterMap.creditCardUUID.value : request.httpParameterMap.dwfrm_billing_paymentMethods_creditCardList.stringValue;

    var selectedCreditCard = null;
    if (UUID && applicableCreditCards && !applicableCreditCards.empty) {

        // find credit card in payment instruments
        var instrumentsIter = applicableCreditCards.iterator();
        while (instrumentsIter.hasNext()) {
            var creditCardInstrument = instrumentsIter.next();
            if (UUID.equals(creditCardInstrument.UUID)) {
                selectedCreditCard = creditCardInstrument;
            }
        }

        if (selectedCreditCard) {
            session.forms.billing.paymentMethods.creditCard.number.value = selectedCreditCard.creditCardNumber;
        }
        else {
            Start();
            return;
        }
    }
    else {
        Start();
        return;
    }

    Form.get(session.forms.billing.paymentMethods.creditCard).copyFrom(selectedCreditCard);

    initCreditCardList(cart);
    start(cart);
}

/**
 * TODO
 *
 * @param cart
 * @returns {boolean}
 */
function handleBillingAddress(cart) {

    var billingAddress = cart.getBillingAddress();
    Transaction.wrap(function () {

        if (!billingAddress) {
            billingAddress = cart.createBillingAddress();
        }

	    Form.get(session.forms.billing.billingAddress.addressFields).copyTo(billingAddress);

        cart.setCustomerEmail(session.forms.billing.billingAddress.email.emailAddress.value);
    });

    return true;
}

/**
 * Reset the forms of all payment methods, except the one of the current
 * selected payment method.
 */
function resetPaymentForms() {

    var cart = Cart.get();

    if (session.forms.billing.paymentMethods.selectedPaymentMethodID.value.equals("PayPal")) {
        session.forms.billing.paymentMethods.creditCard.clearFormElement();
        session.forms.billing.paymentMethods.bml.clearFormElement();

        cart.removePaymentInstruments(cart.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD));
        cart.removePaymentInstruments(cart.getPaymentInstruments(PaymentInstrument.METHOD_BML));
    }
    else if (session.forms.billing.paymentMethods.selectedPaymentMethodID.value.equals(PaymentInstrument.METHOD_CREDIT_CARD)) {
        session.forms.billing.paymentMethods.bml.clearFormElement();

        cart.removePaymentInstruments(cart.getPaymentInstruments(PaymentInstrument.METHOD_BML));
        cart.removePaymentInstruments(cart.getPaymentInstruments("PayPal"));
    }
    else if (session.forms.billing.paymentMethods.selectedPaymentMethodID.value.equals(PaymentInstrument.METHOD_BML)) {
        session.forms.billing.paymentMethods.creditCard.clearFormElement();

        if (!session.forms.billing.paymentMethods.bml.ssn.valid) {
            return false;
        }

        cart.removePaymentInstruments(cart.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD));
        cart.removePaymentInstruments(cart.getPaymentInstruments("PayPal"));
    }

    return true;
}

/**
 * This branch is used to revalidate existing payment instruments in later
 * checkout steps.
 */
function validatePayment(cart) {
    if (session.forms.billing.fulfilled.value) {

        var paymentAmount = cart.getNonGiftCertificateAmount();
        var countryCode = session.forms.billing.billingAddress.addressFields.country.value;

        var invalidPaymentInstruments =
                cart.validatePaymentInstruments(customer, countryCode, paymentAmount.value).InvalidPaymentInstruments;

        if (!invalidPaymentInstruments && cart.calculatePaymentTransactionTotal()) {
            return true;
        }
        else {
            session.forms.billing.fulfilled.value = false;
            return false;
        }
    }
    else {
        return false;
    }
}

/**
 * Attempts to save the used credit card in the customer payment instruments.
 * The logic replaces an old saved credit card with the same masked credit card
 * number of the same card type with the new credit card. This ensures creating
 * only unique cards as well as replacing expired cards.
 */
function saveCreditCard() {

    if (!(customer.authenticated && session.forms.billing.paymentMethods.creditCard.saveCard.value)) {
        return true;
    }
    else {

        var creditCards = customer.getProfile().getWallet().getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD);
        var newCreditCard = customer.getProfile().getWallet().createPaymentInstrument(PaymentInstrument.METHOD_CREDIT_CARD);

        // coy the credit card details to the payment instrument
        newCreditCard.setCreditCardHolder(session.forms.billing.paymentMethods.creditCard.owner.value);
        newCreditCard.setCreditCardNumber(session.forms.billing.paymentMethods.creditCard.number.value);
        newCreditCard.setCreditCardExpirationMonth(session.forms.billing.paymentMethods.creditCard.month.value);
        newCreditCard.setCreditCardExpirationYear(session.forms.billing.paymentMethods.creditCard.year.value);
        newCreditCard.setCreditCardType(session.forms.billing.paymentMethods.creditCard.type.value);

        for (var i = 0; i < creditCards.length; i++) {
            var creditcard = creditCards[i];

            if (creditcard.maskedCreditCardNumber === newCreditCard.maskedCreditCardNumber && creditcard.creditCardType === newCreditCard.creditCardType) {
                customer.getProfile().getWallet().removePaymentInstrument(creditcard);
            }
        }

        return true;
    }
}

/**
 * TODO
 * @returns {boolean}
 */
function validateBilling() {
    if (!session.forms.billing.billingAddress.valid) {
        return false;
    }

    if (!empty(request.httpParameterMap.noPaymentNeeded.value)) {
        return true;
    }

    if (!empty(session.forms.billing.paymentMethods.selectedPaymentMethodID.value) && session.forms.billing.paymentMethods.selectedPaymentMethodID.value.equals(PaymentInstrument.METHOD_CREDIT_CARD)) {
        if (!session.forms.billing.valid) {
            return false;
        }
    }

    return true;
}

/*
 * Module exports
 */

/*
 * Web exposed methods
 */
/** @see module:controller/COBilling~Start */
exports.Start = guard.ensure(['https'], Start);
/** @see module:controller/COBilling~redeemGiftCertificateJson */
exports.RedeemGiftCertificateJson = guard.ensure(['https', 'get'], redeemGiftCertificateJson);
/** @see module:controller/COBilling~removeGiftCertificate */
exports.RemoveGiftCertificate = guard.ensure(['https', 'get'], removeGiftCertificate);
/** @see module:controller/COBilling~updateSummary */
exports.UpdateSummary = guard.ensure(['https', 'get'], updateSummary);
/** @see module:controller/COBilling~updateAddressDetails */
exports.UpdateAddressDetails = guard.ensure(['https', 'get'], updateAddressDetails);
/** @see module:controller/COBilling~editAddress */
exports.EditAddress = guard.ensure(['https', 'get'], editAddress);
/** @see module:controller/COBilling~getGiftCertificateBalance */
exports.GetGiftCertificateBalance = guard.ensure(['https', 'get'], getGiftCertificateBalance);
/** @see module:controller/COBilling~selectCreditCard */
exports.SelectCreditCard = guard.ensure(['https', 'get'], selectCreditCard);
/** @see module:controller/COBilling~updateCreditCardSelection */
exports.UpdateCreditCardSelection = guard.ensure(['https', 'get'], updateCreditCardSelection);
/** @see module:controller/COBilling~billing */
exports.Billing = guard.ensure(['https'], billing);
/** @see module:controller/COBilling~editBillingAddress */
exports.EditBillingAddress = guard.ensure(['https', 'post'], editBillingAddress);

/*
 * Local methods
 */
exports.SaveCreditCard = saveCreditCard;
exports.ValidatePayment = validatePayment;
exports.HandlePaymentSelection = handlePaymentSelection;
