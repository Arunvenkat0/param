var g = require('./dw/guard');
var f = require('./dw/form');

/* API Includes */
var Cart = require('~/cartridge/scripts/model/Cart');

/**
 * Handles all customer login related storefront processes.
 */

/**
 * This method contains the login procedure specific for the customer account,
 * e.g. order tracking. After login, it redirects to the provided target action.
 */
function show(args)
{
    var forms = session.forms;

    f.clearFormElement(forms.ordertrack);
    f.clearFormElement(forms.login);

    if (customer.registered)
    {
        forms.login.username.value = customer.profile.credentials.login;
        forms.login.rememberme.value = true;
    }

    //w.updatePageMetaDataForContent(dw.content.ContentMgr.getContent('myaccount-login'));

    response.renderTemplate('account/login/accountlogin', {
        RegistrationStatus : false
    });
}

function loginForm()
{
    var TriggeredAction = request.triggeredFormAction;
    if (TriggeredAction !== null)
    {
        if (TriggeredAction.formId === 'findorder')
        {
            var OrderController = require('./Order');
            var FindResult = OrderController.Find();
            if (FindResult.error)
            {
                // TODO redirect
                response.renderTemplate('account/login/accountlogin', {
                    OrderNotFound : true
                });
                return;
            }
            // TODO redirect
            response.renderTemplate('account/orderhistory/orderdetails', {
                Order : FindResult.Order
            });
            return;
        }
        else if (TriggeredAction.formId === 'login')
        {
            // get the target action which requested this login step before the
            // form is cleared
            var targetAction = session.forms.login.targetAction.value;
            var targetParameters = session.forms.login.targetParameters.value;

            var LoginController = require('./Login');
            var ProcessResult = LoginController.Process();
            if (ProcessResult.login_failed)
            {
                // TODO redirect
                response.renderTemplate('account/login/accountlogin');
                return;
            }

            // login successful
            // redirect to the origin who triggered the login process
            if (request.httpParameterMap.original.submitted) {
                //@TODO make sure only path, no hosts are allowed as redirect target
                dw.system.Logger.info('Redirecting to {0}',request.httpParameterMap.original.value);
                response.redirect(decodeURI(request.httpParameterMap.original.value));
                return;
            } else if (!empty(targetAction)) {
                if (empty(targetParameters)) {
                    response.redirect(dw.web.URLUtils.https(targetAction));
                } else {
                    response.redirect(dw.web.URLUtils.https(targetAction, JSON.parse(targetParameters)));
                }
            } else {
                response.redirect(dw.web.URLUtils.https('Account-Show'));
            }
            return;
        }
        else if (TriggeredAction.formId === 'register')
        {
            response.redirect(dw.web.URLUtils.https('Account-StartRegister'));
            return;
        }
    }

    response.redirect(dw.web.URLUtils.https('Account-Show'));
}

/**
 * This is a central place to login a user from the login form.
 */
function Process()
{
    if (request.httpParameterMap.OAuthProvider.stringValue) {
        new dw.system.Pipelet('Script', {
            Transactional : false,
            OnError       : 'PIPELET_ERROR',
            ScriptFile    : 'account/login/oauth/PreInitiateOAuthLogin.ds',
        }).execute();

        var InitiateOAuthLoginResult = new dw.system.Pipelet('InitiateOAuthLogin').execute({
            AuthorizationURL : Location,
            OAuthProviderID  : request.httpParameterMap.OAuthProvider.stringValue
        });
        if (InitiateOAuthLoginResult.result == PIPELET_ERROR) {
            oAuthFailed();
            return;
        }

        response.renderTemplate('util/redirect.isml', {
            Location : InitiateOAuthLoginResult.AuthorizationURL
        });
        return;
    }
    else {
        var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
            Login : session.forms.login.username.value
        });
        var TempCustomer = GetCustomerResult.Customer;

        if (typeof(TempCustomer) != 'undefined' && TempCustomer != null && TempCustomer.profile != null && TempCustomer.profile.credentials.locked) {
            return loginFailed();
        }

        var LoginCustomerResult = new dw.system.Pipelet('LoginCustomer').execute({
            Login      : session.forms.login.username.value,
            Password   : session.forms.login.password.value,
            RememberMe : session.forms.login.rememberme.value
        });
        if (LoginCustomerResult.result == PIPELET_ERROR) {
            if (typeof(TempCustomer) != 'undefined' && TempCustomer != null && TempCustomer.profile != null && TempCustomer.profile.credentials.locked) {
                var m = require('./dw/mail');
                m.sendMail({
                    MailFrom     : dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail'),
                    MailSubject  : dw.web.Resource.msg('email.youraccount', 'email', null),
                    MailTemplate : "mail/lockoutemail",
                    MailTo       : TempCustomer.profile.email
                });
            }

            return loginFailed();
        }


        f.clearFormElement(session.forms.login);

        return {
            login_succeeded : true
        };
    }
}

function loginFailed()
{
    f.invalidateFormElement(session.forms.login.loginsucceeded);

    return {
        login_failed: true
    };
}

function oAuthFailed()
{
    f.invalidateFormElement(session.forms.oauthlogin.loginsucceeded);

    postFinalizeOAuthLogin();
}

function oAuthSuccess()
{
    f.clearFormElement(session.forms.oauthlogin);

    postFinalizeOAuthLogin();
}


function postFinalizeOAuthLogin()
{
    // to continue to the destination (preserved in the session before InitiateOAuthLogin pipelet)
    var Location = session.custom['ContinuationURL'];

    delete session.custom['ContinuationURL'];

    response.renderTemplate('util/redirect.isml', {
    	Location: Location
    });
}


function OAuthReentryLinkedIn()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromLinkedInProviderAndLogin.ds'
    }).execute({
        OAuthProviderId: OAuthProviderID,
        ResponseText: ResponseText
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

/**
 * This is the reentry point after an OAuth login, i.e., its URL is passed to the OAuth provider as the redirect URL.
 */
function OAuthReentryGoogle()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromGoogleProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}


function OAuthReentryGooglePlus()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromGooglePlusProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentryMicrosoft()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromMicrosoftProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentryFacebook()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromFacebookProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentryGitHub()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromGitHubProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentrySinaWeibo()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromSinaWeiboProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

/**
 * Logs out the authenticated customer
 */
function OAuthReentryVKontakte()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromVKontakteProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID,
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function Logout()
{
    new dw.system.Pipelet('LogoutCustomer').execute();

	//session.forms.login.clearFormElement();
	//session.forms.profile.clearFormElement();
	//Cart.get().calculate();

    response.redirect(dw.web.URLUtils.https('Account-Show'));
}


/*
 * Module exports
 */

/*
 * Web exposed methods
 */
exports.Show                    = g.httpsGet(show);
exports.LoginForm               = g.httpsPost(loginForm);
exports.OAuthReentryLinkedIn    = g.httpsGet(OAuthReentryLinkedIn);
exports.OAuthReentryGoogle      = g.httpsGet(OAuthReentryGoogle);
exports.OAuthReentryGooglePlus  = g.httpsGet(OAuthReentryGooglePlus);
exports.OAuthReentryMicrosoft   = g.httpsGet(OAuthReentryMicrosoft);
exports.OAuthReentryFacebook    = g.httpsGet(OAuthReentryFacebook);
exports.OAuthReentryGitHub      = g.httpsGet(OAuthReentryGitHub);
exports.OAuthReentrySinaWeibo   = g.httpsGet(OAuthReentrySinaWeibo);
exports.OAuthReentryVKontakte   = g.httpsGet(OAuthReentryVKontakte);
exports.Logout                  = g.all(Logout);

/*
 * Local methods
 */
exports.Process                 = Process;
