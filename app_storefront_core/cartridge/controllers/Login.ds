'use strict';

/**
 * Renders the home page.
 *
 * @module controller/Home
 */

var guard = require('~/cartridge/scripts/guard');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');
var Form = require('~/cartridge/scripts/model/Form');
var loginForm = Form.get('login');
var oauthLoginForm = Form.get('oauthlogin');

var LOGIN_TEMPLATE = 'account/login/accountlogin';
var LOGGER   = dw.system.Logger.getLogger('login');

/* API Includes */
var Cart = require('~/cartridge/scripts/model/Cart');
var Customer = require('~/cartridge/scripts/model/Customer');

/**
 * Handles all customer login related storefront processes.
 */

/**
 * This method contains the login procedure specific for the customer account,
 * e.g. order tracking. After login, it redirects to the provided target action.
 */
function show(args)
{
    loginForm.clear();
    Form.get('ordertrack').clear();

    if (customer.registered)
    {
        loginForm.object.username.value = customer.profile.credentials.login;
        loginForm.object.rememberme.value = true;
    }

    pageMeta.update(dw.content.ContentMgr.getContent('myaccount-login'));

    view.get({
        RegistrationStatus : false
    }).render(LOGIN_TEMPLATE);
}

function handleLoginForm()
{
    loginForm.handleAction({
        'login'     : function () {
            // get the target action which requested this login step before the
            // form is cleared
            // @TODO Remove this session based action passing
            var targetAction = session.forms.login.targetAction.value;
            var targetParameters = session.forms.login.targetParameters.value;

            var success = Customer.login(session.forms.login.username.value, session.forms.login.password.value, session.forms.login.rememberme.value);

            if(!success){
                session.forms.login.loginsucceeded.invalidateFormElement();
                view.get().render(LOGIN_TEMPLATE);
                return;
            }else{
                loginForm.clear();
            }

            // In case of successful login
            // redirect to the origin who triggered the login process
            if (request.httpParameterMap.original.submitted) {
                //@TODO make sure only path, no hosts are allowed as redirect target
                dw.system.Logger.info('Redirecting to "{0}" after successful login',request.httpParameterMap.original.value);
                response.redirect(decodeURI(request.httpParameterMap.original.value));
                return;
            } else if (!empty(targetAction)) {
                if (empty(targetParameters)) {
                    response.redirect(dw.web.URLUtils.https(targetAction));
                } else {
                    response.redirect(dw.web.URLUtils.https(targetAction, JSON.parse(targetParameters)));
                }
            } else {
                response.redirect(dw.web.URLUtils.https('Account-Show'));
            }
            return;        },
        'register'  : function () {
            response.redirect(dw.web.URLUtils.https('Account-StartRegister'));
            return;        },
        'findOrder' : function () {
            var OrderController = require('./Order');
            var FindResult = OrderController.Find();
            if (FindResult.error)
            {
                // TODO redirect
                response.renderTemplate(LOGIN_TEMPLATE, {
                    OrderNotFound : true
                });
                return;
            }
            // TODO redirect
            view.get({
                Order : FindResult.Order
            }).render('account/orderhistory/orderdetails');
            return;
        },
        'error' : function(){
            show();
        }
    });

}

function handleOAuthLoginForm()
{
    oauthLoginForm.handleAction({
        'login'     : function () {
            if (request.httpParameterMap.OAuthProvider.stringValue) {
                session.custom.RememberMe = request.httpParameterMap.rememberme.booleanValue || false;
                session.custom.ContinuationURL = dw.web.URLUtils.https('Login-OAuthReentry').toString();

                LOGGER.debug('Initiating OAuth login (RememberMe: {0}, ContinuationURL: {1}',
                    session.custom.RememberMe,session.custom.ContinuationURL);

                var initiateOAuthLoginResult = new dw.system.Pipelet('InitiateOAuthLogin').execute({
                    OAuthProviderID  : request.httpParameterMap.OAuthProvider.stringValue
                });
                if (initiateOAuthLoginResult.result === PIPELET_ERROR || initiateOAuthLoginResult.AuthorizationURL === null) {
                    session.forms.oauthlogin.loginsucceeded.invalidateFormElement();
                    finishOAuthLogin();

                    // show login page with error
                    view.get().render(LOGIN_TEMPLATE);
                    return;
                }

                response.redirect(initiateOAuthLoginResult.AuthorizationURL);
            }
            return;
        },
        'error' : function(){
            view.get().render(LOGIN_TEMPLATE);
            return;
        }
    });
}

/**
 * This is a central place to login a user from the login form.
 * @deprecated Only kept until all controllers are migrated, functionality has been moved to other methods
 */
function process()
{
    // handle OAuth login
    if (request.httpParameterMap.OAuthProvider.stringValue) {
        session.custom.RememberMe = request.httpParameterMap.rememberme.booleanValue || false;
        session.custom.ContinuationURL = dw.web.URLUtils.https('Login-OAuthReentry').toString();

        LOGGER.debug('Initiating OAuth login (RememberMe: {0}, ContinuationURL: {1}',
            session.custom.RememberMe,session.custom.ContinuationURL);

        var initiateOAuthLoginResult = new dw.system.Pipelet('InitiateOAuthLogin').execute({
            OAuthProviderID  : request.httpParameterMap.OAuthProvider.stringValue
        });
        if (initiateOAuthLoginResult.result === PIPELET_ERROR) {
            session.forms.oauthlogin.loginsucceeded.invalidateFormElement();
            finishOAuthLogin();
            return false;
        }

        response.redirect(initiateOAuthLoginResult.AuthorizationURL);
        return false;
    } else {
        // handle 'normal' login
        var success = Customer.login(session.forms.login.username.value, session.forms.login.password.value, session.forms.login.rememberme.value);

        if(!success){
            session.forms.login.loginsucceeded.invalidateFormElement();
        }else{
            loginForm.clear();
        }
        return success;
    }
}

/**
 * @deprecated Only kept until all controllers are migrated
 */
function oldProcess()
{
    return {
        login_succeeded : process()
    };
}

function oAuthSuccess()
{
    session.forms.oauthlogin.clearFormElement();
    finishOAuthLogin();
}


function finishOAuthLogin()
{
    // to continue to the destination (preserved in the session before InitiateOAuthLogin pipelet)
    var location = session.custom['ContinuationURL'];
    delete session.custom['ContinuationURL'];
    response.redirect(location);
}


function OAuthReentryLinkedIn()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromLinkedInProviderAndLogin.ds'
    }).execute({
        OAuthProviderId: OAuthProviderID,
        ResponseText: ResponseText
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

/**
 * This is the reentry point after an OAuth login, i.e., its URL is passed to the OAuth provider as the redirect URL.
 */
function OAuthReentryGoogle()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromGoogleProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}


function OAuthReentryGooglePlus()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromGooglePlusProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentryMicrosoft()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromMicrosoftProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentryFacebook()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromFacebookProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentryGitHub()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromGitHubProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function OAuthReentrySinaWeibo()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromSinaWeiboProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

/**
 * Logs out the authenticated customer
 */
function OAuthReentryVKontakte()
{
    var FinalizeOAuthLoginResult = new dw.system.Pipelet('FinalizeOAuthLogin').execute();
    if (FinalizeOAuthLoginResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }
    var ResponseText = FinalizeOAuthLoginResult.ResponseText;
    var AccessToken = FinalizeOAuthLoginResult.AccessToken;
    var RefreshToken = FinalizeOAuthLoginResult.RefreshToken;
    var AccessTokenExpiry = FinalizeOAuthLoginResult.AccessTokenExpiry;
    var OAuthProviderID = FinalizeOAuthLoginResult.OAuthProviderID;
    var ErrorStatus = FinalizeOAuthLoginResult.ErrorStatus;


    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional: true,
        OnError: 'PIPELET_ERROR',
        ScriptFile: 'account/login/oauth/ObtainAccountFromVKontakteProviderAndLogin.ds'
    }).execute({
        ResponseText: ResponseText,
        OAuthProviderID: OAuthProviderID,
    });
    if (ScriptResult.result == PIPELET_ERROR)
    {
    	oAuthFailed();
    	return;
    }

    oAuthSuccess();
}

function Logout()
{
    Customer.logout();

	session.forms.login.clearFormElement();
	session.forms.profile.clearFormElement();
	//Cart.get().calculate();

    response.redirect(dw.web.URLUtils.https('Account-Show'));
}


/*
 * Module exports
 */

/*
 * Web exposed methods
 */
exports.Show                    = guard.ensure(['https'], show);
exports.LoginForm               = guard.ensure(['https','post'], handleLoginForm);
exports.OAuthLoginForm          = guard.ensure(['https','post'], handleOAuthLoginForm);
exports.OAuthReentryLinkedIn    = guard.ensure(['https','get'], OAuthReentryLinkedIn);
exports.OAuthReentryGoogle      = guard.ensure(['https','get'], OAuthReentryGoogle);
exports.OAuthReentryGooglePlus  = guard.ensure(['https','get'], OAuthReentryGooglePlus);
exports.OAuthReentryMicrosoft   = guard.ensure(['https','get'], OAuthReentryMicrosoft);
exports.OAuthReentryFacebook    = guard.ensure(['https','get'], OAuthReentryFacebook);
exports.OAuthReentryGitHub      = guard.ensure(['https','get'], OAuthReentryGitHub);
exports.OAuthReentrySinaWeibo   = guard.ensure(['https','get'], OAuthReentrySinaWeibo);
exports.OAuthReentryVKontakte   = guard.ensure(['https','get'], OAuthReentryVKontakte);
exports.Logout                  = guard.all(Logout);

/*
 * Local methods
 */
exports.Process                 = oldProcess;
