'use strict';

/**
 * Controller : account
 *
 * @module controller/Account
 */

/* API Includes */
var Mail = require('dw/net/Mail');
var Account = require('~/cartridge/scripts/model/Account');
var Transaction = require('dw/system/Transaction');
var Template = require('dw/util/Template');

/* Script Modules */
var accountHomeAsset = require('~/cartridge/scripts/model/Content').get('myaccount-home');
var accountPersonalDataAsset = require('~/cartridge/scripts/model/Content').get('myaccount-personaldata');
var accountLogin = require('~/cartridge/scripts/model/Content').get('myaccount-login');
var guard = require('~/cartridge/scripts/guard');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');
var Form = require('~/cartridge/scripts/model/Form');
var accountForm = require('~/cartridge/scripts/model/Form').get('myaccount');


/*
 * Public controller methods
 */

/**
 * Renders the account overview.
 */
function Show()
{
    pageMeta.update(accountHomeAsset);
    
    view.get().render('account/accountoverview');
}

/**
 * Updates the profile of an authenticated customer.
 */
function EditProfile()
{
    var CurrentForms = session.forms;
    var CurrentCustomer = customer;

    var TargetPipeline = 'Account-EditProfile';
  
    CurrentForms.profile.clearFormElement();

    Form.get(CurrentForms.profile.customer).copyFrom(CurrentCustomer.profile);
    Form.get(CurrentForms.profile.login).copyFrom(CurrentCustomer.profile.credentials);
    Form.get(CurrentForms.profile.addressbook.addresses).copyFrom(CurrentCustomer.profile.addressBook.addresses);

    var Status = null;
	pageMeta.update(accountPersonalDataAsset);
    
    response.renderTemplate('account/user/registration_edit', {
        bctext2 : dw.web.Resource.msg('account.editaccount', 'account', null),
        Action : 'edit'
    });
}

/**
 * Updates the profile of an authenticated customer. Does not clear the form
 * from previous attempt to keep the error messages. This is shown after an
 * update has failed.
 */
function EditProfileError()
{
    var TargetPipeline = 'Account-EditProfile';

    var Status = null;

    pageMeta.update(accountPersonalDataAsset);

    response.renderTemplate('account/user/registration_edit', {
        bctext2 : dw.web.Resource.msg('account.editaccount', 'account', null),
        Action : 'edit'
    });
}

function EditForm()
{
    
    var formResult = accountForm.handleAction({
    	'cancel'             : function (formgroup) {
           session.forms.profile.clearFormElement();

            response.redirect(dw.web.URLUtils.https('Account-Show'));
            return;
        },
        'confirm'             : function (formgroup) {
           if (Account.editAccount())
            {
                // success
                response.redirect(dw.web.URLUtils.https('Account-Show'));
                return;
            }
        }    
    });

    response.redirect(dw.web.URLUtils.https('Account-EditProfileError'));
}

/**
 * Renders the password reset dialog.
 */
function PasswordResetDialog()
{
    
    session.forms.requestpassword.clearFormElement();
   
    response.renderTemplate('account/password/requestpasswordresetdialog');
}

/**
 * Handles the password reset form.
 */
function PasswordResetDialogForm()
{
    
    var formResult = accountForm.handleAction({
    	'cancel'             : function (formgroup) {
           response.renderTemplate('account/password/requestpasswordresetdialog');
           return;
        },
        'send'             : function (formgroup) {
           var params = {};

            var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
                Login : session.forms.requestpassword.email.htmlValue
            });
            if (GetCustomerResult.result != PIPELET_ERROR)
            {
                var Customer = GetCustomerResult.Customer;

                var GenerateResetPasswordTokenResult = new dw.system.Pipelet('GenerateResetPasswordToken').execute({
                    Customer : Customer
                });
                var ResetPasswordToken = GenerateResetPasswordTokenResult.ResetPasswordToken;

				var template = new Template('mail/resetpasswordemail');
                var mail = new Mail();
                mail.addTo(Customer.profile.email);
            	mail.setFrom(dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail'));
            	mail.setSubject(dw.web.Resource.msg('email.passwordassistance', 'email', null));
            	mail.setContent(template.render());
            	mail.send();

                params.ErrorCode = null;
                params.ShowContinue = true;

                response.renderTemplate('account/password/requestpasswordreset_confirm', params);
                return;
            }
        }    
    });
    
    response.renderTemplate('account/password/requestpasswordresetdialog', {
        ErrorCode : 'formnotvalid'
    });
}

/**
 * Renders the password reset screen. This is very similar to the password reset
 * dialog but has screen-based interaction instead of popup interaction.
 */
function passwordReset()
{
    session.forms.requestpassword.clearFormElement();

    response.renderTemplate('account/password/requestpasswordreset');
}

/**
 * The form handler for password resets.
 */
function PasswordResetForm()
{  
    var formResult = accountForm.handleAction({
        'send'             : function (formgroup) {
           var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
                Login : CurrentForms.requestpassword.email.htmlValue
            });
            if (GetCustomerResult.result == PIPELET_ERROR)
            {
                response.renderTemplate('account/password/requestpasswordreset', {
                    ErrorCode : 'notfounderror'
                });
                return;
            }
            var Customer = GetCustomerResult.Customer;

            var GenerateResetPasswordTokenResult = new dw.system.Pipelet('GenerateResetPasswordToken').execute({
                Customer : Customer
            });
            var ResetPasswordToken = GenerateResetPasswordTokenResult.ResetPasswordToken;

            var template = new Template('mail/resetpasswordemail');
            var mail = new Mail();
            mail.addTo(Customer.profile.email);
        	mail.setFrom(dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail'));
        	mail.setSubject(dw.web.Resource.msg('email.passwordassistance', 'email', null));
        	mail.setContent(template.render());
        	mail.send();

            response.renderTemplate('account/password/requestpasswordreset_confirm', {
                ErrorCode : null
            });
            return;
        }    
    });
    
    // TODO redirect
    response.renderTemplate('account/password/requestpasswordreset', {
        ErrorCode : 'formnotvalid'
    });
}

/**
 * Renders the screen for setting a new password. If token not valid, just
 * quietly forward to PasswordReset screen. This is the link sent by email.
 */
function SetNewPassword()
{
    var CurrentHttpParameterMap = request.httpParameterMap;
    var CurrentForms = session.forms;

    CurrentForms.resetpassword.clearFormElement();

    if (CurrentHttpParameterMap.Token == null)
    {
        passwordReset();
        return;
    }

    var ValidateResetPasswordTokenResult = new dw.system.Pipelet('ValidateResetPasswordToken').execute({
        Token : CurrentHttpParameterMap.Token.getStringValue()
    });
    if (ValidateResetPasswordTokenResult.result == PIPELET_ERROR)
    {
        passwordReset();
        return;
    }
    var Customer = ValidateResetPasswordTokenResult.Customer;

    response.renderTemplate('account/password/setnewpassword');
}

function SetNewPasswordForm()
{
    var formResult = accountForm.handleAction({
    	'cancel'             : function (formgroup) {
           response.renderTemplate('account/password/setnewpassword');
           return;
        },
        'send'             : function (formgroup) {
           // TODO redirects

            var ValidateResetPasswordTokenResult = new dw.system.Pipelet('ValidateResetPasswordToken').execute({
                Token : CurrentHttpParameterMap.Token.getStringValue()
            });
            if (ValidateResetPasswordTokenResult.result == PIPELET_ERROR)
            {
                passwordReset();
                return;
            }
            var Customer = ValidateResetPasswordTokenResult.Customer;

            if (CurrentForms.resetpassword.password.value != CurrentForms.resetpassword.passwordconfirm.value)
            {
                CurrentForms.resetpassword.passwordconfirm.invalidateFormElement();

                response.renderTemplate('account/password/setnewpassword');
                return;
            }

            var ResetCustomerPasswordWithTokenResult = new dw.system.Pipelet('ResetCustomerPasswordWithToken')
                    .execute({
                        Customer : Customer,
                        Token : CurrentHttpParameterMap.Token.stringValue,
                        Password : CurrentForms.resetpassword.password.htmlValue
                    });
            if (ResetCustomerPasswordWithTokenResult.result == PIPELET_ERROR)
            {
                response.renderTemplate('account/password/setnewpassword', {
                    ErrorCode : 'invalidpassworderror'
                });
                return;
            }
            
            var template = new Template('mail/passwordchangedemail');
            var mail = new Mail();
            mail.addTo(Customer.profile.email);
        	mail.setFrom(dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail'));
        	mail.setSubject(dw.web.Resource.msg('email.passwordassistance', 'email', null));
        	mail.setContent(template.render());
        	mail.send();

            response.redirect(dw.web.URLUtils.https('Account-SetNewPasswordConfirm'));
            return;
          }   
    });
    

    // TODO redirects
    response.renderTemplate('account/password/setnewpassword', {
        ErrorCode : 'formnotvalid'
    });
}

function SetNewPasswordConfirm()
{
    response.renderTemplate('account/password/setnewpassword_confirm', {});
}

/**
 * Start the customer registration process and renders customer registration
 * page.
 */
function StartRegister()
{
    var forms = session.forms;

    forms.profile.clearFormElement();

    if (forms.login.username.value != null)
    {
        forms.profile.customer.email.value = forms.login.username.value;
    }

    response.renderTemplate('account/user/registration');
}

// Originally, there is only one template account/user/registration
// with a form which triggers either the registration or the edit handler
// (depending on the pipeline which defines other continuations for the same
// template).
// Now, there are two templates:
// account/user/registration
// account/user/registration_edit
function RegistrationForm()
{
    var formResult = accountForm.handleAction({
        'confirm'             : function (formgroup) {
           if (!Account.createAccount())
            {
                // TODO redirect
                response.renderTemplate('account/user/registration');
                return;
            }

            session.forms.profile.clearFormElement();

            // TODO originally there is a return to the calling pipeline
            // this is not possible anymore because we have not preserved the
            // callstack accross multiple requests
            response.redirect(dw.web.URLUtils.https('Account-Show', ['registration', true]));

            /*
            var LoginController = require('./Login');
            LoginController.Redirect({
                TargetPipeline : 'Account-Show',
                TargetPipelineParams : 'registration=true'
            });
            */
            return;
        }    
    });
    
    response.renderTemplate('account/user/registration');
}


function LoginForm()
{
    var formResult = accountForm.handleAction({
        'findorder'             : function (formgroup) {
           var OrderController = require('./Order');
            var FindResult = OrderController.Find();
            if (FindResult.error)
            {
                // TODO redirect
                response.renderTemplate('account/login/accountlogin', {
                    OrderNotFound : true
                });
                return;
            }
            // TODO redirect
            response.renderTemplate('account/orderhistory/orderdetails', {
                Order : FindResult.Order
            });
            return;
        },
        'login'             : function (formgroup) {
           // get the target action which requested this login step before the
            // form is cleared
            var targetAction = session.forms.login.targetAction.value;
            var targetParameters = session.forms.login.targetParameters.value;

            var LoginController = require('./Login');
            var ProcessResult = LoginController.Process();
            if (ProcessResult.login_failed)
            {
                // TODO redirect
                response.renderTemplate('account/login/accountlogin');
                return;
            }

            // login successful
            // redirect to the origin who triggered the login process
            if (request.httpParameterMap.original.submitted) {
                //@TODO make sure only path, no hosts are allowed as redirect target 
            	response.redirect(decodeURI(request.httpParameterMap.original.value));
            } else if (!empty(targetAction)) {
                if (empty(targetParameters)) {
                    response.redirect(dw.web.URLUtils.https(targetAction));
                } else {
                    response.redirect(dw.web.URLUtils.https(targetAction, JSON.parse(targetParameters)));
                }
            } else {
                response.redirect(dw.web.URLUtils.https('Account-Show'));
            }
            return;
        }, 
        'register'             : function (formgroup) {
           response.redirect(dw.web.URLUtils.https('Account-StartRegister'));
           return;
        }   
    });

    response.redirect(dw.web.URLUtils.https('Account-Show'));
}

/**
 * Renders the account navigation.
 */
function IncludeNavigation()
{
    response.renderTemplate('account/accountnavigation');
}

/**
 * Facebook Connect for registration
 */
function Connect()
{
    var CurrentForms = session.forms;

    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional : false,
        OnError : 'PIPELET_ERROR',
        ScriptFile : 'account/user/connect.ds'
    }).execute();
    if (ScriptResult.result == PIPELET_ERROR)
    {
        if (RegistrationStatus.code == 'CustomerAlreadyExistError')
        {
            CurrentForms.login.username.value = FacebookUser.registration.email;

            CurrentForms.login.loginsucceeded.invalidateFormElement();

            /*
             * Used when user has attempted to use their facebook account to
             * create a storefront account that is already in the BM
             */
            response.renderTemplate('account/login/accountlogin', {
                TargetPipeline : 'Account-Show',
                RegistrationStatus: RegistrationStatus
            });
            return;
        }

        // TODO where to go from here?
        response.redirect(dw.web.URLUtils.https('Account-Show'));
        //var LoginController = require('./Login');
        //LoginController.Redirect({});
        return;
    }
    var FacebookJSON = ScriptResult.FacebookJSON;
    var FacebookUser = ScriptResult.FacebookUser;
    var RegistrationStatus = ScriptResult.RegistrationStatus;

    if (!Account.createAccount())
    {
        response.redirect(dw.web.URLUtils.https('Account-StartRegister'));
        return;
    }

    response.redirect(dw.web.URLUtils.https('Account-Show'));
}

/**
 * A guard function which ensures that the user is logged in before the action can be executed.
 */
function loggedIn(action)
{
    return function()
    {
        if (!customer.authenticated)
        {
            requireLogin({
                TargetAction : 'Account-Show'
            });
            return;
        }

        action();
    };
}	

/**
 * This method contains the login procedure specific for the customer account,
 * e.g. order tracking. After login, it redirects to the provided target action.
 */
function requireLogin(args)
{
    var forms = session.forms;

    session.forms.ordertrack.invalidateFormElement();
    session.forms.login.invalidateFormElement();

    if (customer.registered)
    {
        session.forms.login.username.value = customer.profile.credentials.login;
        session.forms.login.rememberme.value = true;
    }

	pageMeta.update(accountLogin);

    // set the redirect destination
    session.forms.login.targetAction.value = args.TargetAction;
    
    if (!empty(args.TargetParameters))
    {
        session.forms.login.targetParameters.value = JSON.stringify(args.TargetParameters);
    }
    
    response.renderTemplate('account/login/accountlogin', {
        RegistrationStatus : false
    });
}

/*
 * Module exports
 */

/*
 * Web exposed methods
 */
/** @see module:controller/Account~Show */
exports.Show = guard.ensure(['get', 'https'], loggedIn(Show));
/** @see module:controller/Account~EditProfile */
exports.EditProfile = guard.ensure(['get', 'https'], loggedIn(EditProfile));
/** @see module:controller/Account~EditProfileError */
exports.EditProfileError = guard.ensure(['get', 'https'], loggedIn(EditProfileError));
/** @see module:controller/Account~EditForm */
exports.EditForm = guard.ensure(['post', 'https'], loggedIn(EditForm));
/** @see module:controller/Account~PasswordResetDialog */
exports.PasswordResetDialog = guard.ensure(['get', 'https'], PasswordResetDialog);
/** @see module:controller/Account~PasswordResetDialogForm */
exports.PasswordResetDialogForm = guard.ensure(['post', 'https'], PasswordResetDialogForm);
/** @see module:controller/Account~PasswordResetForm */
exports.PasswordResetForm = guard.ensure(['post', 'https'], PasswordResetForm);
/** @see module:controller/Account~SetNewPassword */
exports.SetNewPassword = guard.ensure(['get', 'https'], SetNewPassword);
/** @see module:controller/Account~SetNewPasswordForm */
exports.SetNewPasswordForm = guard.ensure(['post', 'https'], SetNewPasswordForm);
/** @see module:controller/Account~SetNewPasswordConfirm */
exports.SetNewPasswordConfirm = guard.ensure(['get', 'https'], SetNewPasswordConfirm);
/** @see module:controller/Account~StartRegister */
exports.StartRegister = guard.ensure(['get', 'https'], StartRegister);
/** @see module:controller/Account~RegistrationForm */
exports.RegistrationForm = guard.ensure(['post', 'https'], RegistrationForm);
/** @see module:controller/Account~LoginForm */
exports.LoginForm = guard.ensure(['post', 'https'], LoginForm);
/** @see module:controller/Account~IncludeNavigation */
exports.IncludeNavigation = guard.ensure(['get'], IncludeNavigation);
/** @see module:controller/Account~Connect */
exports.Connect = guard.ensure(['https'], Connect);