'use strict';

/**
 * Controller : account
 *
 * @module controller/Account
 */

/* API Includes */
var Email = require('~/cartridge/scripts/model/Email');
var Account = require('~/cartridge/scripts/model/Account');
var Transaction = require('dw/system/Transaction');
var Template = require('dw/util/Template');

/* Script Modules */
var content = require('~/cartridge/scripts/model/Content');
var accountHomeAsset = content.get('myaccount-home');
var accountPersonalDataAsset = content.get('myaccount-personaldata');
var accountLogin = content.get('myaccount-login');
var guard = require('~/cartridge/scripts/guard');
var pageMeta = require('~/cartridge/scripts/meta');
var view = require('~/cartridge/scripts/view');
var Form = require('~/cartridge/scripts/model/Form');
var accountForm = Form.get('myaccount');


/*
 * Public controller methods
 */

/**
 * Renders the account overview.
 */
function show()
{
    pageMeta.update(accountHomeAsset);
    
    view.get().render('account/accountoverview');
}

/**
 * Updates the profile of an authenticated customer.
 */
function EditProfile()
{
    var CurrentForms = session.forms;
    var CurrentCustomer = customer;

    var TargetPipeline = 'Account-EditProfile';
  
    CurrentForms.profile.clearFormElement();

    Form.get(CurrentForms.profile.customer).copyFrom(CurrentCustomer.profile);
    Form.get(CurrentForms.profile.login).copyFrom(CurrentCustomer.profile.credentials);
    Form.get(CurrentForms.profile.addressbook.addresses).copyFrom(CurrentCustomer.profile.addressBook.addresses);

    pageMeta.update(accountPersonalDataAsset);
    
    response.renderTemplate('account/user/registration_edit', {
        bctext2 : dw.web.Resource.msg('account.editaccount', 'account', null),
        Action : 'edit'
    });
}

/**
 * Updates the profile of an authenticated customer. Does not clear the form
 * from previous attempt to keep the error messages. This is shown after an
 * update has failed.
 */
function EditProfileError()
{
    var TargetPipeline = 'Account-EditProfile';

    var Status = null;

    pageMeta.update(accountPersonalDataAsset);

    response.renderTemplate('account/user/registration_edit', {
        bctext2 : dw.web.Resource.msg('account.editaccount', 'account', null),
        Action : 'edit'
    });
}

function EditForm()
{
    
    var formResult = accountForm.handleAction({
    	'cancel'             : function (formgroup) {
           Form.get('profile').clear()

            response.redirect(dw.web.URLUtils.https('Account-Show'));
            return;
        },
        'confirm'             : function (formgroup) {
           if (Account.editAccount())
            {
                // success
                response.redirect(dw.web.URLUtils.https('Account-Show'));
                return;
            }
        }    
    });

    response.redirect(dw.web.URLUtils.https('Account-EditProfileError'));
}

/**
 * Renders the password reset dialog.
 */
function PasswordResetDialog()
{
    
    Form.get('requestpassword').clear();
   
    view.get().render('account/password/requestpasswordresetdialog');
}

/**
 * Handles the password reset form.
 */
function PasswordResetDialogForm()
{
    
    var formResult = accountForm.handleAction({
    	'cancel'             : function (formgroup) {
    	  view.get().render('account/password/requestpasswordresetdialog');
           return;
        },
        'send'             : function (formgroup) {
           var params = {};

            var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
                Login : session.forms.requestpassword.email.htmlValue
            });
            if (GetCustomerResult.result != PIPELET_ERROR)
            {
                var Customer = GetCustomerResult.Customer;

                var GenerateResetPasswordTokenResult = new dw.system.Pipelet('GenerateResetPasswordToken').execute({
                    Customer : Customer
                });
                var ResetPasswordToken = GenerateResetPasswordTokenResult.ResetPasswordToken;

				Email.get('mail/resetpasswordemail', Customer.profile.email)
				.setSubject((dw.web.Resource.msg('email.passwordassistance', 'email', null))
		        .send({});

                params.ErrorCode = null;
                params.ShowContinue = true;
				
				view.get().render('account/password/requestpasswordreset_confirm', params);
                return;
            }
        }    
    });
    
    view.get().render('account/password/requestpasswordresetdialog', {
        ErrorCode : 'formnotvalid'
    });
}

/**
 * Renders the password reset screen. This is very similar to the password reset
 * dialog but has screen-based interaction instead of popup interaction.
 */
function passwordReset()
{
    Form.get('requestpassword').clear();
	view.get().render('account/password/requestpasswordreset');
}

/**
 * The form handler for password resets.
 */
function PasswordResetForm()
{  
    var formResult = accountForm.handleAction({
        'send'             : function (formgroup) {
           var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
                Login : CurrentForms.requestpassword.email.htmlValue
            });
            if (GetCustomerResult.result == PIPELET_ERROR)
            {
                view.get().render('account/password/requestpasswordreset', {
                    ErrorCode : 'notfounderror'
                });
                return;
            }
            var Customer = GetCustomerResult.Customer;

            var GenerateResetPasswordTokenResult = new dw.system.Pipelet('GenerateResetPasswordToken').execute({
                Customer : Customer
            });
            var ResetPasswordToken = GenerateResetPasswordTokenResult.ResetPasswordToken;

            Email.get('mail/resetpasswordemail', Customer.profile.email)
				.setSubject((dw.web.Resource.msg('email.passwordassistance', 'email', null))
		        .send({});

			view.get().render('account/password/requestpasswordreset_confirm', {
                ErrorCode : null
            });
            return;
        }    
    });
    
    // TODO redirect
    view.get().render('account/password/requestpasswordreset', {
        ErrorCode : 'formnotvalid'
    });
}

/**
 * Renders the screen for setting a new password. If token not valid, just
 * quietly forward to PasswordReset screen. This is the link sent by email.
 */
function SetNewPassword()
{
    var currentHttpParameterMap = request.httpParameterMap;
    
    Form.get('resetpassword').clear();

    if (currentHttpParameterMap.Token == null)
    {
        passwordReset();
        return;
    }

    var ValidateResetPasswordTokenResult = new dw.system.Pipelet('ValidateResetPasswordToken').execute({
        Token : currentHttpParameterMap.Token.getStringValue()
    });
    if (ValidateResetPasswordTokenResult.result == PIPELET_ERROR)
    {
        passwordReset();
        return;
    }
    var Customer = ValidateResetPasswordTokenResult.Customer;
	
	view.get().render('account/password/setnewpassword');
}

function SetNewPasswordForm()
{
    var currentHttpParameterMap = request.httpParameterMap;
    var currentForms = session.forms;
    
    var formResult = accountForm.handleAction({
    	'cancel'             : function (formgroup) {
           view.get().render('account/password/setnewpassword');
           return;
        },
        'send'             : function (formgroup) {
           // TODO redirects

            var ValidateResetPasswordTokenResult = new dw.system.Pipelet('ValidateResetPasswordToken').execute({
                Token : currentHttpParameterMap.Token.getStringValue()
            });
            if (ValidateResetPasswordTokenResult.result == PIPELET_ERROR)
            {
                passwordReset();
                return;
            }
            var Customer = ValidateResetPasswordTokenResult.Customer;

            if (currentForms.resetpassword.password.value != currentForms.resetpassword.passwordconfirm.value)
            {
                currentForms.resetpassword.passwordconfirm.invalidateFormElement();

                view.get().render('account/password/setnewpassword');
                return;
            }

            var ResetCustomerPasswordWithTokenResult = new dw.system.Pipelet('ResetCustomerPasswordWithToken')
                    .execute({
                        Customer : Customer,
                        Token : currentHttpParameterMap.Token.stringValue,
                        Password : currentForms.resetpassword.password.htmlValue
                    });
            if (ResetCustomerPasswordWithTokenResult.result == PIPELET_ERROR)
            {
                view.get().render('account/password/setnewpassword', {
                    ErrorCode : 'invalidpassworderror'
                });
                return;
            }
            
            Email.get('mail/passwordchangedemail', Customer.profile.email)
				.setSubject((dw.web.Resource.msg('email.passwordassistance', 'email', null))
		        .send({});

            response.redirect(dw.web.URLUtils.https('Account-SetNewPasswordConfirm'));
            return;
          }   
    });
    

    // TODO redirects
    view.get().render('account/password/setnewpassword', {
        ErrorCode : 'formnotvalid'
    });
}

function SetNewPasswordConfirm()
{
    view.get().render('account/password/setnewpassword_confirm', {});
}

/**
 * Start the customer registration process and renders customer registration
 * page.
 */
function StartRegister()
{
    var forms = session.forms;

    Form.get('profile').clear();

    if (forms.login.username.value != null)
    {
        forms.profile.customer.email.value = forms.login.username.value;
    }

	view.get().render('account/user/registration');
}

// Originally, there is only one template account/user/registration
// with a form which triggers either the registration or the edit handler
// (depending on the pipeline which defines other continuations for the same
// template).
// Now, there are two templates:
// account/user/registration
// account/user/registration_edit
function RegistrationForm()
{
    var formResult = accountForm.handleAction({
        'confirm'             : function (formgroup) {
           if (!Account.createAccount())
            {
                // TODO redirect
                view.get().render('account/user/registration');
                return;
            }

            Form.get('profile').clear()

            // TODO originally there is a return to the calling pipeline
            // this is not possible anymore because we have not preserved the
            // callstack accross multiple requests
            response.redirect(dw.web.URLUtils.https('Account-Show', ['registration', true]));

            return;
        }    
    });
    
    view.get().render('account/user/registration');
}


/**
 * Renders the account navigation.
 */
function IncludeNavigation()
{
    view.get().render('account/accountnavigation');
}

/**
 * Facebook Connect for registration
 */
function Connect()
{
    var currentForms = session.forms;

    var ScriptResult = new dw.system.Pipelet('Script', {
        Transactional : false,
        OnError : 'PIPELET_ERROR',
        ScriptFile : 'account/user/connect.ds'
    }).execute();
    if (ScriptResult.result == PIPELET_ERROR)
    {
        if (RegistrationStatus.code == 'CustomerAlreadyExistError')
        {
            currentForms.login.username.value = FacebookUser.registration.email;

            currentForms.login.loginsucceeded.invalidateFormElement();

            /*
             * Used when user has attempted to use their facebook account to
             * create a storefront account that is already in the BM
             */
            view.get().render('account/login/accountlogin', {
                TargetPipeline : 'Account-Show',
                RegistrationStatus: RegistrationStatus
            });
            return;
        }

        // TODO where to go from here?
        response.redirect(dw.web.URLUtils.https('Account-Show'));
        
        return;
    }
    var FacebookJSON = ScriptResult.FacebookJSON;
    var FacebookUser = ScriptResult.FacebookUser;
    var RegistrationStatus = ScriptResult.RegistrationStatus;

    if (!Account.createAccount())
    {
        response.redirect(dw.web.URLUtils.https('Account-StartRegister'));
        return;
    }

    response.redirect(dw.web.URLUtils.https('Account-Show'));
}


/*
 * Module exports
 */

/*
 * Web exposed methods
 */
/** @see module:controller/Account~Show */
exports.Show = guard.ensure(['get', 'https', 'loggedIn'], show);
/** @see module:controller/Account~EditProfile */
exports.EditProfile = guard.ensure(['get', 'https', 'loggedIn'], EditProfile);
/** @see module:controller/Account~EditProfileError */
exports.EditProfileError = guard.ensure(['get', 'https', 'loggedIn'], EditProfileError);
/** @see module:controller/Account~EditForm */
exports.EditForm = guard.ensure(['post', 'https', 'loggedIn'], EditForm);
/** @see module:controller/Account~PasswordResetDialog */
exports.PasswordResetDialog = guard.ensure(['get', 'https'], PasswordResetDialog);
/** @see module:controller/Account~PasswordResetDialogForm */
exports.PasswordResetDialogForm = guard.ensure(['post', 'https'], PasswordResetDialogForm);
/** @see module:controller/Account~PasswordResetForm */
exports.PasswordResetForm = guard.ensure(['post', 'https'], PasswordResetForm);
/** @see module:controller/Account~SetNewPassword */
exports.SetNewPassword = guard.ensure(['get', 'https'], SetNewPassword);
/** @see module:controller/Account~SetNewPasswordForm */
exports.SetNewPasswordForm = guard.ensure(['post', 'https'], SetNewPasswordForm);
/** @see module:controller/Account~SetNewPasswordConfirm */
exports.SetNewPasswordConfirm = guard.ensure(['get', 'https'], SetNewPasswordConfirm);
/** @see module:controller/Account~StartRegister */
exports.StartRegister = guard.ensure(['get', 'https'], StartRegister);
/** @see module:controller/Account~RegistrationForm */
exports.RegistrationForm = guard.ensure(['post', 'https'], RegistrationForm);
/** @see module:controller/Account~IncludeNavigation */
exports.IncludeNavigation = guard.ensure(['get'], IncludeNavigation);
/** @see module:controller/Account~Connect */
exports.Connect = guard.ensure(['https'], Connect);