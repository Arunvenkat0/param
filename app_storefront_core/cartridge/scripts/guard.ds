'use strict';

/**
 * This is a collection of decorators for functions which performs several security checks.
 * They can be combined with each other to configure the necessary constraints for a function that is exposed to the Internet.
 *
 * @module guard
 *
 * @example
 * <caption>Example of an Account controller</caption>
 * function show() {
 *     // shows account landing page
 * }
 *
 * // allow only GET requests via HTTPS for logged in users
 * exports.Show = require('~/guard').ensure(['get','https','loggedIn'],show);
 */
var browsing = require('~/cartridge/scripts/util/Browsing');
var LOGGER   = dw.system.Logger.getLogger('guard');

/**
 * This method contains the login to handle a not logged in customer
 */
function requireLogin(params)
{
    if(customer.authenticated){
        return true;
    }
    var redirectUrl = dw.web.URLUtils.https('Login-Show','original', browsing.lastUrl());

    if(params && params.scope){
        redirectUrl.append('scope', params.scope);
    }

    response.redirect(redirectUrl);
    return false;
}

/**
 * Guard that ensures that the provided action is only executed when the request is secure (e.g. the schema is HTTPS).
 * If it is not secure, the provided error handler is called. If no error handler is provided, by default a switch to
 * HTTPS is attempted.
 *
 * @param action the action to the executed if the request is HTTPS
 * @param error the optional error handler which should be called if the request is not HTTPS
 */
function https(action, error)
{
    return expose(function()
    {
        if (request.isHttpSecure())
        {
            dw.system.Logger.debug('*** guard https ok');

            action();
            return;
        }

        if (error !== null)
        {
            dw.system.Logger.debug('*** guard non-https access to "' + action.name +
                '" denied, calling error handler');

            error();
            return;
        }

        // no error handler, use default behavior
        dw.system.Logger.debug('*** guard non-https access to "' + action.name +
            '" denied, calling default handler');

        // try to switch to https
        switchToHttps();
    });
}

/**
 * Performs a protocol switch for the URL of the current request to HTTPS. Responds with a redirect to the client.
 *
 * @return false, if switching is not possible (for example, because its a POST request)
 */
function switchToHttps()
{
    if (request.httpMethod !== 'GET')
    {
        // switching is not possible, send error 403 (forbidden)
        response.sendError(403);
        return false;
    }

    var url = 'https://' + request.httpHost + request.httpPath;

    if (!empty(request.httpQueryString))
    {
        url += '?' + request.httpQueryString;
    }

    response.redirect(url);
    return true;
}

/**
 * The available filters for endpoints, the names of the methods can be used in {@link module:guard~ensure}
 * @namespace
 */
var Filters = {
    /** Action must be accessed via HTTPS */
    https : function() {return request.isHttpSecure();},
    /** Action must be accessed via HTTP */
    http : function() {return !this.https();},
    /** Action must be accessed via a GET request */
    get : function() {return request.httpMethod === 'GET';},
    /** Action must be accessed via a POST request */
    post : function() {return request.httpMethod === 'POST';},
    /** Action must only be accessed authenticated csutomers */
    loggedIn : function() {return customer.authenticated;},
    /** Action must only be used as remote include */
    include : function() {
        // the main request will be something like kjhNd1UlX_80AgAK-0-00, all includes
        // have incremented trailing counters
        return request.httpHeaders['x-is-requestid'].indexOf('-0-00') === -1;
    }
};


/**
 * This function should be used to secure public endpoints
 *
 * @param  {string[]} filters The filters which need to be passed to access the page
 * @param  {function} action  The action which represents the resource to show
 * @param  {Object}   params  Additional parameters which are passed to all filters and the action
 * @see module:guard~Filters
 */
function ensure (filters, action, params) {
    return expose(function() {
        var error;
        var filtersPassed = true;
        var errors = [];
        for (var i = 0; i < filters.length; i++) {
            LOGGER.info('Ensuring "{0}"...',filters[i]  );

            filtersPassed = Filters[filters[i]].apply(Filters);
            if (!filtersPassed) {
                errors.push(filters[i]);
                if (filters[i] === 'https') {
                    error = switchToHttps;
                } else if (filters[i] === 'loggedIn') {
                    error = requireLogin;
                }
                break;
            }

        }

        if ( !error ) {
            error = function() {
                var url = dw.web.URLUtils.url('Error-Start','guardmismatch', errors.join('|'));
                response.redirect(url);
                return response;
            };
        }

        if (filtersPassed) {
            LOGGER.info('...passed.');
            return action(params);
        } else {
            LOGGER.info('...failed. {0}',error.name);
            return error(params);
        }
    });

}



/**
 * Guard that only accepts POST requests. For other methods, an HTTP error 405 (Not Allowed) is sent.
 *
 * @deprecated
 */
function post(action)
{
    return ensure(['post'], action);

}

/**
 * Guard that only accepts GET requests. For other methods, an HTTP error 405 (Not Allowed) is sent.
 *
 * @deprecated
 */
function get(action)
{
    return ensure(['get'], action);
}

/**
 * Exposes the given action to be accessible from the web. The action gets a property which marks it as exposed. This
 * property is checked by the platform.
 */
function expose(action)
{
    action.public = true;
    return action;
}

/**
 * Executes the given action in a transactional context. This allows for atomic changes in the database.
 */
function transactional(action)
{
    var txn = require('dw/system/Transaction');
    txn.begin();

    action();

    txn.commit();
}

/*
 * Module exports
 */
/** @see module:guard~https
 * @deprecated
 */
exports.https = https;
/** @see module:guard~get
 * @deprecated
 */
exports.get = get;
/** @see module:guard~post
 * @deprecated
 */
exports.post = post;
/** @see module:guard~expose */
exports.all = expose;

// often needed combinations
/**
 * @see module:guard~https
 * @see module:guard~get
 * @deprecated Use ensure(['https','get'], action) instead
 */
exports.httpsGet = function(action)
{
    return ensure(['https','get'], action);
};

/**
 * @see module:guard~https
 * @see module:guard~post
 * @deprecated Use ensure(['https','post'], action) instead
 */
exports.httpsPost = function(action)
{
    return ensure(['https','post'], action);
};

exports.transactional = transactional;

/**
 * Use this method to combine different filters, typically this is used to secure methods when exporting
 * them as publicly avaiblable endpoints in controllers.
 *
 * @example
 * // allow only GET requests for the Show endpoint
 * exports.Show = require('~/guard').ensure(['get'],show);
 *
 * // allow only POST requests via HTTPS for the Find endpoint
 * exports.Find = require('~/guard').ensure(['post','https'],find);
 *
 * // allow only logged in customer via HTTPS for the Profile endpoint
 * exports.Profile = require('~/guard').ensure(['https','loggedIn'],profile);
 */
exports.ensure = ensure;
