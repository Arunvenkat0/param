'use strict';

/*
 usage
 var content = require('~/cartridge/scripts/model/Customer');
 */

/** @module model/Customer */

var AbstractModel = require('./AbstractModel');
var CustomerMgr = require('dw/customer/CustomerMgr');
var Transaction = require('dw/system/Transaction');
var Form = require('~/cartridge/scripts/model/Form');
var Email = require('~/cartridge/scripts/model/Email');

/**
 * Customer helper providing enhanced content functionality
 * @class module:model/Customer~Customer
 */
var Customer = AbstractModel.extend(
/** @lends module:model/Customer~Customer.prototype */
{


});

/**
 * Use this method to get the the current customer or pass in a customer instance.
 */
exports.get = function (parameter) {
    var obj = null;
    if (typeof parameter === 'undefined') {
        obj = customer;
    }
    else if (typeof parameter === 'object') {
        obj = parameter;
    }
    return new Customer(obj);
};

exports.login = function(username, password, rememberMe){
    var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
        Login : username
    });
    var TempCustomer = GetCustomerResult.Customer;

    // @TODO customer locked currently not handled
    if (typeof(TempCustomer) !== 'undefined' && TempCustomer !== null && TempCustomer.profile !== null && TempCustomer.profile.credentials.locked) {
        return false;
    }

    var LoginCustomerResult = new dw.system.Pipelet('LoginCustomer').execute({
        Login      : username,
        Password   : password,
        RememberMe : rememberMe
    });
    if (LoginCustomerResult.result === PIPELET_ERROR) {
        if (typeof(TempCustomer) !== 'undefined' && TempCustomer !== null && TempCustomer.profile !== null && TempCustomer.profile.credentials.locked) {
            Email.get('mail/lockoutemail', TempCustomer.profile.email)
				.setSubject((dw.web.Resource.msg('email.youraccount', 'email', null))
		        .send({});
        }

        return false;
    }
    return true;
};

exports.logout = function(){
    new dw.system.Pipelet('LogoutCustomer').execute();
};

/**
 * Looks up a customer by its login.
 */
exports.getCustomerByLogin = function (login)
{
    var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
        Login : login
    });
    if (GetCustomerResult.result == PIPELET_ERROR)
    {
        return null;
    }

    return GetCustomerResult.Customer;
};
		
exports.createCustomer = function (login, password)
{
    var CreateCustomerResult = new dw.system.Pipelet('CreateCustomer').execute({
        Login : login,
        Password : password
    });
    if (CreateCustomerResult.result == PIPELET_ERROR)
    {
        return null;
    }

    return CreateCustomerResult.Customer;
};
		
/**
 * Sets the customers login.
 * 
 * @param customer the customer
 * @param login the user name of the customer
 * @param password the password of the current customer
 * @return true, if the login / password was updated
 */
export.setLogin = function (customer, login, password)
{
    if ((customer == null) || (login == null) || (password == null))
    {
        return false;
    }

    return customer.profile.credentials.setLogin(login, password);
};

exports.loginCustomer = function (login, password, rememberMe)
{
    var LoginCustomerResult = new dw.system.Pipelet('LoginCustomer').execute({
        Login : login,
        Password : password,
        RememberMe : rememberMe
    });

    return (LoginCustomerResult.result != PIPELET_ERROR);
};
		
/**
 * Creates a new customer account.
 * 
 * @return true, if the account was created successfully
 */
exports.createAccount = function ()
{
    var profileForm = session.forms.profile;

    var email = profileForm.customer.email.value;
    var emailConfirmation = profileForm.customer.emailconfirm.value;

    if (email != emailConfirmation)
    {
        profileForm.customer.emailconfirm.invalidateFormElement();
        return false;
    }

    var password = profileForm.login.password.value;
    var passwordConfirmation = profileForm.login.passwordconfirm.value;

    if (password != passwordConfirmation)
    {
        profileForm.login.passwordconfirm.invalidateFormElement();
        return false;
    }

    // check if login is already taken
    var existingCustomer = this.getCustomerByLogin(email);
    if (existingCustomer != null)
    {
        profileForm.customer.email.invalidateFormElement();
        return false;
    }

    Transaction.begin();

    // create the new customer
    var newCustomer = this.createCustomer(email, password);
    if (newCustomer == null)
    {
        Transaction.rollback();
        profileForm.invalidateFormElement();
        return false;
    }

    if (!Form.get(profileForm.customer).copyTo(newCustomer.profile))
    {
        Transaction.rollback();
        profileForm.invalidateFormElement();
        return false;
    }

    email = profileForm.customer.email.value;
    password = profileForm.login.password.value;

    // set login / password
    if (!this.setLogin(newCustomer, email, password))
    {
        Transaction.rollback();
        profileForm.invalidateFormElement();
        return false;
    }

    Transaction.commit();
	
	Form.get(session.forms.login).copyTo(newCustomer.profile.credentials);
    
    var login = profileForm.customer.email.value;
    password = profileForm.login.password.value;
    var rememberMe = profileForm.login.rememberme.value;

    // login the customer
    return this.loginCustomer(login, password, rememberMe);
};
		
/**
 * Checks the given user name on existence and ends on a named end node to
 * communicated the status back.
 */
exports.checkUserName = function ()
{
    var profileForm = session.forms.profile;

    if (customer.profile.credentials.login == profileForm.customer.email.value)
    {
        return true;
    }

    var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
        Login : profileForm.customer.email.value,
    });
    if (GetCustomerResult.result == PIPELET_ERROR)
    {
        return true;
    }

    return false;
};
		
exports.editAccount = function ()
{
    var profileForm = session.forms.profile;

    if (!this.checkUserName())
    {
        profileForm.customer.email.invalidateFormElement();
        return false;
    }

    if (profileForm.customer.email.value != profileForm.customer.emailconfirm.value)
    {
        profileForm.customer.emailconfirm.invalidateFormElement();
        return false;
    }

    if (profileForm.login.password.value != profileForm.login.passwordconfirm.value)
    {
        profileForm.login.passwordconfirm.invalidateFormElement();
        return false;
    }

    profileForm.login.username.value = profileForm.customer.email.value;

    Transaction.begin();

    if (!this.setLogin(customer, profileForm.customer.email.value, profileForm.login.password.value))
    {
        Transaction.rollback();
        return false;
    }

    var SetCustomerPasswordResult = new dw.system.Pipelet('SetCustomerPassword').execute({
        Password : profileForm.login.password.value,
        Customer : customer
    });
    if (SetCustomerPasswordResult.result == PIPELET_ERROR)
    {
        Transaction.rollback();
        return false;
    }
	
    if (!Form.get(profileForm.customer).copyFrom(customer.profile())
    {
        Transaction.rollback();
        return false;
    }

    Transaction.commit();

    profileForm.clearFormElement();

    return true;
};