'use strict';

/*
 usage
 var content = require('~/cartridge/scripts/model/Customer');
 */

/** @module model/Customer */

var AbstractModel = require('./AbstractModel');
var CustomerMgr = require('dw/customer/CustomerMgr');
var Transaction = require('dw/system/Transaction');
/**
 * Customer helper providing enhanced content functionality
 * @class module:model/Customer~Customer
 *
 * @param parameter {dw.customer.Customer} The customer object to enhance/wrap.
 */
var Customer = AbstractModel.extend(
    /** @lends module:model/Customer~Customer.prototype */
    {});

/**
 * Use this method to get the the current customer or pass in a customer instance.
 *
 * @param parameter {dw.customer.Customer=} The customer object to enhance/wrap. If NULL the current customer is
 * retrieved from the session.
 * @returns {module:model/Customer~Customer}
 */
Customer.get = function (parameter) {
    var obj = null;
    if (typeof parameter === 'undefined') {
        obj = customer;
    }
    else if (typeof parameter === 'object') {
        obj = parameter;
    }
    return new Customer(obj);
};

/**
 * Authenticates the current session using the supplied Login and Password. If a different customer is currently
 * authenticated in the session, then this customer is "logged out" and her/his privacy and form data are deleted.
 *
 * @param username {String} Login name.
 * @param password {String} Password.
 * @param rememberMe {Boolean=} Optional Boolean value indicating if the customer wants to be remembered on the current
 * computer. If a value of True is supplied a cookie identifying the customer is stored upon successful login. If a value
 * of False, or a null value, is supplied, then no cookie is stored and any existing cookie is removed.
 * @returns {boolean}
 */
Customer.login = function (username, password, rememberMe) {
    var GetCustomerResult = new dw.system.Pipelet('GetCustomer').execute({
        Login : username
    });
    var TempCustomer = GetCustomerResult.Customer;

    // @TODO customer locked currently not handled
    if (typeof(TempCustomer) !== 'undefined' && TempCustomer !== null && TempCustomer.profile !== null && TempCustomer.profile.credentials.locked) {
        return false;
    }

    var LoginCustomerResult = new dw.system.Pipelet('LoginCustomer').execute({
        Login      : username,
        Password   : password,
        RememberMe : rememberMe
    });
    if (LoginCustomerResult.result === PIPELET_ERROR) {
        if (typeof(TempCustomer) !== 'undefined' && TempCustomer !== null && TempCustomer.profile !== null && TempCustomer.profile.credentials.locked) {
            require('./dw/mail').sendMail({
                MailFrom     : dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail'),
                MailSubject  : dw.web.Resource.msg('email.youraccount', 'email', null),
                MailTemplate : 'mail/lockoutemail',
                MailTo       : TempCustomer.profile.email
            });
        }

        return false;
    }
    return true;
};

/**
 * Logs out the customer currently logged into the storefront.
 */
Customer.logout = function () {
    new dw.system.Pipelet('LogoutCustomer').execute();
};

/** The customer class */
module.exports = Customer;