'use strict';
/**
 * Module for cart related functionality.
 *
 * @module model/Cart
 */

/* API Includes */
var AbstractHelper = require('./AbstractHelper');
var Product = require('~/cartridge/scripts/model/Product');
var ProductInventoryMgr = require('dw/catalog/ProductInventoryMgr');
var StoreMgr = require('dw/catalog/StoreMgr');

/**
 * Category helper providing enhanced category functionality
 * @class module:model/Cart~Cart
 */
var Cart = AbstractHelper.extend(
    /** @lends module:model/Cart~Cart.prototype */
    {
	    /**
	     * Use this method to get a new instance for the current or a given basket.
	     *
	     * @param parameter
	     * @returns {Cart}
	     */
        get : function (parameter) {
            var obj = null;

            if (!parameter) {
                // TODO
                var GetBasketResult = new dw.system.Pipelet('GetBasket', {
                    Create : false
                }).execute();

                if (GetBasketResult.result !== PIPELET_ERROR) {
                    obj = GetBasketResult.Basket;
                }
            }
            else if (typeof parameter === 'object') {
                obj = parameter;
            }
            return new Cart(obj);
        },

	    /**
	     * Use this method to get or create a new instance of a basket
	     c
	     */
	    goc : function () {
		    var obj = null;

		    var GetBasketResult = new dw.system.Pipelet('GetBasket', {
			    Create : true
		    }).execute();

		    if (GetBasketResult.result !== PIPELET_ERROR) {
			    obj = GetBasketResult.Basket;
		    }

		    return new Cart(obj);

	    },

	    /**
	     * TODO
	     */
        calculate : function () {

            dw.system.HookMgr.callHook("dw.ocapi.shop.basket.calculate", "calculate", this.object);

        },

        /**
         * TODO
         *
         * @param plid
         * @param itemid
         * @param quantity
         * @param cgid
         * @returns {null}
         */
        addProductListItem : function (productListItem, quantity, cgid) {

            if (productListItem) {

	            var productOptionSelections = require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(productListItem.getProduct(), request.httpParameterMap);

                // TODO
                var AddProductToBasketResult = new dw.system.Pipelet('AddProductToBasket').execute({
                    Basket             : this.object,
                    ProductOptionModel : productOptionSelections.ProductOptionModel,
                    Quantity           : quantity,
                    Category           : dw.catalog.CatalogMgr.getCategory(cgid),
                    ProductListItem    : productListItem
                });
                if (AddProductToBasketResult.result === PIPELET_ERROR) {
                    return null;
                }

                this.calculate();
            }

            return;
        },

        /**
         * TODO
         *
         * @param pid
         * @param quantity
         * @param cgid
         */
        addProductItem : function (product, quantity, cgid, productOptionModel) {

            if (product) {

                // TODO
                var AddProductToBasketResult = new dw.system.Pipelet('AddProductToBasket').execute({
                    Basket             : this.object,
                    Product            : product,
                    ProductOptionModel : productOptionModel,
                    Quantity           : quantity,
                    Category           : dw.catalog.CatalogMgr.getCategory(cgid)
                });

                if (AddProductToBasketResult.result === PIPELET_ERROR) {
                    return;
                }
                var ProductLineItem = AddProductToBasketResult.ProductLineItem;

                if (product.bundle) {
	                /**
	                 * By default, when a bundle is added to cart all its sub products gets added too, but if those products happens to be
	                 * variants then we have to manually replace the master products with the selected variants which gets passed in the
	                 * http params as childPids along with any options. Params: CurrentHttpParameterMap.childPids - comma separated list of
	                 * pids of the bundled products which are variations
	                 */
	                if (request.httpParameterMap.childPids.stringValue) {
		                var childPids = request.httpParameterMap.childPids.stringValue.split(",");

		                for (var i = 0; i < childPids.length; i++) {
			                var childProduct = Product.get(childPids[i]).object;

			                if (childProduct) {
				                // why is this needed ?
				                require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(childProduct, request.httpParameterMap);

				                var foundLineItem = null;
				                foundLineItem = cart.getBundledProductLineItemByPID(lineItem, (childProduct.isVariant() ? childProduct.masterProduct.ID : childProduct.ID));

				                if (foundLineItem) {
					                foundLineItem.replaceProduct(childProduct);
				                }
			                }
		                }
	                }
                }

                this.calculate();

            }

            return;
        },

	    /**
	     *
	     * @param couponCode
	     * @returns {{CouponStatus: (Status|*|deleteAddress.Status|pdict.Status)}}
	     */
        addCoupon : function (couponCode) {
            if (couponCode) {

                var AddCouponToBasket2Result = new dw.system.Pipelet('AddCouponToBasket2').execute({
                    Basket     : this.object,
                    CouponCode : couponCode
                });

                if (AddCouponToBasket2Result.result !== PIPELET_ERROR) {
                    this.calculate();
                    return {'CouponStatus' : AddCouponToBasket2Result.Status};
                }
            }

            return;
        },

	    /**
	     * Adds a bonus product to the Basket associated with the specified BonusDiscountLineItem. The pipelet creates
	     * and returns a ProductLineItem, by assigning the specified Product and Quantity to the specified Basket. The
	     * function adds the new ProductLineItem to the default shipment.
	     * The passed product must be one of the products associated with the BonusDiscountLineItem or the process will
	     * fail. The process does NOT validate if the number of bonus products exceeds the maximum allowed by the bonus
	     * discount. This is the job of application logic.
	     * Function always creates a new product line item, regardless of the value of the site preference
	     * 'Add Product Behavior'.
	     *
	     * @param bonusDiscountLineItem
	     * @param product
	     */
        addBonusProduct : function (bonusDiscountLineItem, product, selectedOptions, quantity) {

            var ScriptResult = new dw.system.Pipelet('Script', {
                Transactional : false,
                OnError       : 'PIPELET_ERROR',
                ScriptFile    : 'cart/UpdateProductOptionSelections.ds'
            }).execute({
                    SelectedOptions : selectedOptions,
                    Product         : product
                });

            var AddBonusProductToBasketResult = new dw.system.Pipelet('AddBonusProductToBasket').execute({
                Basket                : this.object,
                BonusDiscountLineItem : bonusDiscountLineItem,
                Product               : product,
                Quantity              : quantity,
                ProductOptionModel    : ScriptResult.ProductOptionModel
            });

            return;
        },

	    /**
	     *
	     * @param giftCertificateLineItem
	     */
        removeGiftCertificateLineItem : function (giftCertificateLineItem) {

	        // TODO - add check whether the given lineitem actually belongs to this cart object
            new dw.system.Pipelet('RemoveGiftCertificateLineItem').execute({
                GiftCertificateLineItem : giftCertificateLineItem
            });

            return;
        },

	    /**
	     * Deletes all the products associated with a bonus discount line item.
	     *
	     * @param bonusDiscountLineItem
	     */
	    removeBonusDiscountLineItemProducts : function (bonusDiscountLineItem) {
		    // TODO - add check whether the given lineitem actually belongs to this cart object
            var plis = bonusDiscountLineItem.getBonusProductLineItems();

            for (var i = 0; i < plis.length; i++) {
                var pli = plis[i];
                if (pli.product != null) {
                    this.removeProductLineItem(pli);
                }
            }
	    },

	    /**
	     *
	     * @param lineItemUUID
	     * @returns {*}
	     */
	    getProductLineItemByUUID : function (lineItemUUID) {
		    var plis = this.getProductLineItems();
            var lineItem = null;

            for (var i = 0, il = plis.length; i < il; i++) {
                var item = plis[i];
                if ((lineItemUUID != null && item.UUID === lineItemUUID)) {
                    lineItem = item;
                    break;
                }
            }

            return lineItem;
        },

	    /**
	     *
	     * @param bundleLineItem
	     * @param pid
	     * @returns {*}
	     */
	    getBundledProductLineItemByPID : function (bundleLineItem, pid) {
		    // TODO - add check whether the given lineitem actually belongs to this cart object
		    var plis = bundleLineItem.getBundledProductLineItems();
		    var lineItem = null;

		    for (var i = 0, il = plis.length; i < il; i++) {
			    var item = plis[i];
			    if ((pid != null && item.productID === pid)) {
				    lineItem = item;
				    break;
			    }
		    }

		    return lineItem;
	    },

	    /**
	     *
	     * @param lineItemUUID
	     * @returns {*}
	     */
	    getBonusDiscountLineItemByUUID : function (lineItemUUID) {
		    var plis = this.getBonusDiscountLineItems();
		    var lineItem = null;

		    for (var i = 0, il = plis.length; i < il; i++) {
			    var item = plis[i];
			    if ((lineItemUUID != null && item.UUID === lineItemUUID)) {
				    lineItem = item;
				    break;
			    }
		    }

		    return lineItem;
	    },

	    /**
	     * This function will checks the instore qty against the store inventory in the case that the pli's qtyt has
	     * been updated.
	     */
        checkInStoreProducts : function () {
		    if (dw.system.Site.getCurrent().getCustomPreferenceValue('enableStorePickUp')) {

			    var allProductLineItems = this.getAllProductLineItems();
			    for (var i = 0; i < allProductLineItems.length; i++) {
				    var pli = allProductLineItems[i];

				    //skip none instore pli's
				    if (pli.custom.fromStoreId) {
					    //check the qty against the inventory of the store with matching storeID,
					    //in the event that the cart is being updated with a new qty
					    var store = StoreMgr.getStore(pli.custom.fromStoreId);
					    var storeinventory = ProductInventoryMgr.getInventoryList(store.custom.inventoryListId);

					    if (storeinventory.getRecord(pli.productID).ATS.value >= pli.quantityValue) {
						    pli.custom.fromStoreId = store.ID;
						    pli.setProductInventoryList(storeinventory);

					    }
					    else {
						    //the in store line item will be reset to a regular home delivery item.
						    pli.custom.fromStoreId = "";
						    pli.setProductInventoryList(null);
						    pli.setShipment(basket.getDefaultShipment());
					    }
				    }
			    }
		    }

		    return;
	    },

	    /**
	     *
	     * @returns {*}
	     */
	    validateForCheckout : function () {

		    var result = new dw.system.Pipelet('Script', {
			    ScriptFile    : 'cart/ValidateCartForCheckout.ds',
			    Transactional : false
		    }).execute({
				    Basket      : this.object,
				    ValidateTax : false
			    });

		    return result;

	    }
    });


/** The cart class */
module.exports = new Cart();
