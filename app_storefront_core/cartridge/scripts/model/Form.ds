'use strict';
/* jshint indent:false,white:false */

/**
 * Module for form related functionality.
 *
 * @module model/Form
 */

var AbstractModel = require('./AbstractModel');

/**
 * Form helper providing enhanced Form functionality
 * @class module:model/Form~Form
 * @extends module:model/AbstractModel
 */
var Form = AbstractModel.extend(
    /** @lends module:model/Form~Form.prototype */
    {
        get : function (groupName) {
            if(this.object){
                return Form.get(require('~/cartridge/scripts/object').resolve(this.object,groupName));
            }
            return new Form();
        },
        /**
         * Each form action should define a form action callback
         *
         * @callback module:model/Form~ActionCallback
         * @param {dw.web.Form|dw.web.FormGroup} formGroup The current form (group) instance
         * @param {dw.web.FormAction} action The triggered form action
         */

        /**
         * Handle the submitted form action or call the error handler in case the form is not valid. If the form does
         * not validate the TriggeredAction would be null.
         *
         * @param {Object<string|module:model/Form~ActionCallback>} formHandler Callbacks for each possible form action
         * @example
         * require('~/model/Form').get('login').handleAction({
         *     "login" : function(formgroup, action){
         *         // handle login button
         *     },
         *     "register" : function(formgroup, action){
         *         // handle registration button
         *     }
         * });
         */
        handleAction : function (formHandler) {
            // check whether an action is defined (e.g, if the form is invalid)
            var action = request.triggeredFormAction;
            if (!action.formId) {
                // check whether there is an explicit error handler defined
                if ('error' in formHandler) {
                    return formHandler.error.apply(formHandler, [this.object, action]);
                }
                // log a warning and return null if no explicit error handler is defined
                else {
                    dw.system.Logger.warn('Action handler called without action ' + this.object.formId);
                    return null;
                }
            }
            else {
                return formHandler[action.formId].apply(formHandler, [this.object, action]);
            }
        },

        /**
         * Updates the  form with the corresponding property values from the given object.
         *
         * @param updateObject the object
         * @param clear optional, if true, the form is cleared first before updating it
         * @returns {module:model/Form~Form}
         */
        copyFrom : function (updateObject, clear) {

            clear = (typeof clear !== 'undefined') ? clear : false;

            if (clear) {
                this.object.clear();
            }

            // update the form
            this.object.copyFrom(updateObject);

            return this;
        },

        /**
         * Updates the given Object with the corresponding property values contained in the Form.
         *
         * @transactional
         * @param updateObject
         * @returns {boolean}
         */
        copyTo : function (updateObject) {

            try {
                var group = this.object;
                dw.system.Transaction.wrap(function(){
                    group.copyTo(updateObject);
                });
                return true;
            }
            catch (e) {
                return false;
            }

        },

        /**
         * Clears the wrapped form instance
         */
        clear : function () {
            this.object.clearFormElement();
        }

    });

/**
 * Use this method to get a new instance for a given form reference or form object.
 *
 * @param formReference {dw.web.FormElement|String} Demandware form id (/forms/$name$.xml) or Demandware form object.
 * @returns {module:model/Form~Form}
 */
Form.get = function (formReference) {
    var formInstance = null;
    if (typeof formReference === 'string') {
        formInstance = require('~/cartridge/scripts/object').resolve(session.forms,formReference);
    }
    else if (typeof formReference === 'object') {
        formInstance = formReference;
    }

    return new Form(formInstance);
};

/** The Form class */
module.exports = Form;
