'use strict';
/* jshint indent:false,white:false */

/*
usage
var form = require('~/cartridge/scripts/model/Form');
*/

/** @module model/Form */

var AbstractHelper = require('./AbstractHelper');

/**
 * Form helper providing enhanced Form functionality
 * @class module:model/Form~Form
 */
var Form = AbstractHelper.extend(
/** @lends module:model/Form~Form.prototype */
{
	action : null,
	
	/**
	 * Use this method to get a new instance for a given category.
	 * @param formReference demandware form id (/forms/$name$.xml) or demandware form object
	 */
	get : function(formReference) {
		var formInstance = null;
		if (typeof formReference === 'string') {
			formInstance = session.forms[formReference];
		} else if (typeof formReference === 'object') {
			formInstance = formReference;
		}
		
		var myInstance = new Form(formInstance);
		// decorate instance
		if (request.triggeredFormAction) {
			myInstance.action = request.triggeredFormAction.formId;
		}
		
		return myInstance;
	},
	
	/**
	 *	executes an action submitted in the request. 
	 *  @param {Object} formHandler Implementation of each possible form action
	 */
	handleAction : function(formHandler) {
		if (!this.action) {
			dw.system.Logger.warn('Action handler called without action ' + this.object.formId);
			return null;
		} else {
			return formHandler[this.action].apply(formHandler, [this.object]);
		}
	},
	
	clear : function() {
		this.object.clearFormElement();	
	},
	
	setValue : function (key,value) {
		this.object[key].value = value;	
	}
	
});

/** The Form class */
module.exports = new Form();
