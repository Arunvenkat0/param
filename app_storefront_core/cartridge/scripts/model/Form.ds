'use strict';
/* jshint indent:false,white:false */

/**
 * Module for form related functionality.
 *
 * usage
 * var form = require('~/cartridge/scripts/model/Form');
 *
 * @module model/Cart
 */

var AbstractModel = require('./AbstractModel');

/**
 * Form helper providing enhanced Form functionality
 * @class module:model/Form~Form
 */
var Form = AbstractModel.extend(
	/** @lends module:model/Form~Form.prototype */
    {
        action : null,

        /**
         * Use this method to get a new instance for a given form reference or form object.
         * @param formReference demandware form id (/forms/$name$.xml) or demandware form object
         */
        get : function (formReference) {
            var formInstance = null;
            if (typeof formReference === 'string') {
                formInstance = session.forms[formReference];
            }
            else if (typeof formReference === 'object') {
                formInstance = formReference;
            }

            var myInstance = new Form(formInstance);
            // decorate instance
            if (request.triggeredFormAction) {
                myInstance.action = request.triggeredFormAction.formId;
            }

            return myInstance;
        },

        /**
         * Executes an action submitted in the request.
         * @param {Object} formHandler Implementation of each possible form action
         */
        handleAction : function (formHandler) {
            // check whether an action is defined (e.g, if the form is invalid)
            if (!this.action) {
                // check whether there is an explicit error handler defined
                if ('error' in formHandler) {
                    return formHandler['error'].apply(formHandler, [this.object]);
                }
                // log a warning and return null if no explicit error handler is defined
                else {
                    dw.system.Logger.warn('Action handler called without action ' + this.object.formId);
                    return null;
                }
            }
            else {
                return formHandler[this.action].apply(formHandler, [this.object]);
            }
        },

        /**
         * Updates the  form with the corresponding property values from the given object.
         *
         * @param updateObject the object
         * @param clear optional, if true, the form is cleared first before updating it
         * @returns {Form}
         */
        copyFrom : function (updateObject, clear) {

            clear = (typeof clear !== 'undefined') ? clear : false;

            if (clear) {
                this.object.clear();
            }
            else {
                // update the form
                this.object.copyFrom(updateObject);
            }

            return this;
        },

        /**
         * Updates the given Object with the corresponding property values contained in the Form.
         *
         * @param updateObject
         * @returns {boolean}
         */
        copyTo : function (updateObject) {

	        try {
                this.object.copyTo(updateObject);
                return true;
            }
            catch (e) {
                return false;
            }

        }

    });

/** The Form class */
module.exports = new Form();
