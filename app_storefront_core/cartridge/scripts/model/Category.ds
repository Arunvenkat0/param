'use strict';

/** @module model/Category */

/* API Includes */
var AbstractModel = require('./AbstractModel');
var ArrayList = require('dw/util/ArrayList');
var CatalogMgr = require('dw/catalog/CatalogMgr');

/**
 * Category helper providing enhanced category functionality
 * @class module:model/Category~Category
 * @extends module:model/AbstractModel
 *
 * @param {dw.catalog.Category} obj The category object to enhance/wrap.
 */
var Category = AbstractModel.extend(
    /** @lends module:model/Category~Category.prototype */
    {
        /**
         *    Prints out category's alternative url if maintained on custom attribute
         *    uses custom attribute of type MarkupText to be able to maintain url-util styled urls - i.e $url('GiftCert-Purchase')$
         */
        getUrl : function () {
            var category = this.object;
            var url = dw.web.URLUtils.http('Search-Show', 'cgid', category.getID());

            return url;
        },

        /**
         * Gets a list of online categories that have the showInMenu attribute set to true.
         *
         * @param {Boolean} renderAllCategories Return all online subcategories if true.
         * @return {Array} subcategories  : Array Subcategories for menu
         */
        getMenuCategories : function (renderAllCategories) {
            var subcategories = this.object.getOnlineSubCategories(),
                result        = [];
            if (renderAllCategories) {
                return subcategories;
            }
            if (subcategories) {
                for (i = 0; i < subcategories.length; i++) {
                    if (('showInMenu' in subcategories[i].custom) && subcategories[i].custom.showInMenu.valueOf()) {
                        result.push(subcategories[i]);
                    }
                }
            }
            return result;
        },

        /**
         * Returns top level online categories list if exists, otherwise returns sibling online categories list if exists otherwise returns empty list
         */
        getTopLevelCategories : function () {
            if (this.object.getParent() !== null) {
                if (this.object.getParent().getParent() !== null) {
                    return this.object.getParent().getParent().getOnlineSubCategories();
                }
                else {
                    return this.object.getParent().getOnlineSubCategories();
                }
            }
            else {
                return new ArrayList();
            }
        }
    });

/**
 * Use this method to get a new instance for a given category.
 *
 * @param parameter {(dw.catalog.Category|String)} The category object to enhance/wrap or the category ID of the category
 * object.
 * @returns {module:model/Category~Category}
 */
Category.get = function (parameter) {
    var obj = null;
    if (typeof parameter === 'string') {
        obj = CatalogMgr.getCategory(parameter);
    }
    else if (typeof parameter === 'object') {
        obj = parameter;
    }
    return new Category(obj);
};

/**
 * Returns the root category from site catalog.
 *
 * @returns {dw.catalog.Category} The root catalog category
 */
Category.getTopLevelCategory = function () {
    var siteCatalog = CatalogMgr.getSiteCatalog();
    return (siteCatalog !== null) ? siteCatalog.getRoot() : null;
};

/** The category class */
module.exports = Category;
