'use strict';

/** @module model/PaymentProcessor */
var Class = require('~/cartridge/scripts/util/Class').Class;
var HookMgr = require('dw/system/HookMgr');
var PaymentMgr = require('dw/order/PaymentMgr');

/**
 * Payment processor model used to execute payment processor / method specific logic using the hook concept of the
 * Demandware platform.
 *
 * @class module:model/PaymentProcessor~PaymentProcessor
 */
var PaymentProcessor = Class.extend({
    /** @lends module:model/PaymentProcessor~PaymentProcessor.prototype */
});

/**
 * Executes the provider / method specific form validation and payment instrument creation. The Payment provider / method
 * specific logic is executed using a dynamic hook. The hook to execute is identified by the key
 * 'app.payment.processor.' + processor.ID. The method executed is named 'Handle'. If no payment provider / method specific
 * hook can be found, the method 'Handle' of the default hook 'app.payment.processor.default' will be executed.
 *
 * @param {dw.order.Basket} cart The order to validate.
 * @param {String} paymentMethodID The ID of payment method to execute the validation logic for.
 * @returns {*}
 */
PaymentProcessor.handle = function (cart, paymentMethodID) {
    var processor = PaymentMgr.getPaymentMethod(paymentMethodID).getPaymentProcessor();
    if (dw.system.HookMgr.hasHook('app.payment.processor.' + processor.ID)){
        return dw.system.HookMgr.callHook('app.payment.processor.' + processor.ID, 'Handle', {
            Basket : cart
        });
    }
    else {
        return dw.system.HookMgr.callHook('app.payment.processor.default', 'Handle', {
            Basket : cart
        });
    }
};

/**
 * Executes the provider / method specific payment authorization logic. The Payment provider / method specific logic is
 * executed using a dynamic hook. The hook to execute is identified by the key 'app.payment.processor.' + processor.ID.
 * The method executed is named 'Authorize'. If no payment provider / method specific hook can be found, the method
 * 'Authorize' of the default hook 'app.payment.processor.default' will be executed.
 *
 * @param {dw.order.Order} order The order to authorize.
 * @param {dw.order.PaymentInstrument} paymentInstrument The payment instrument to execute the authorization logic for.
 * @returns {*}
 */
PaymentProcessor.authorize = function (order, paymentInstrument) {
    var processor = PaymentMgr.getPaymentMethod(paymentInstrument.getPaymentMethod()).getPaymentProcessor();
    if (HookMgr.hasHook('app.payment.processor.' + processor.ID)){
        return HookMgr.callHook('app.payment.processor.' + processor.ID, 'Authorize', {
            OrderNo           : order.getOrderNo(),
            PaymentInstrument : paymentInstrument
        });
    }
    else {
        return HookMgr.callHook('app.payment.processor.default', 'Authorize', {
            OrderNo           : order.getOrderNo(),
            PaymentInstrument : paymentInstrument
        });
    }
};

/** The PaymentProcessor class */
module.exports = PaymentProcessor;
