'use strict';
/**
 * @module transaction
 */

var Transaction = require('dw/system/Transaction');

/**
 * Handles committing or rolling back the transaction automagically. You start a autocommit transaction by passing a
 * callback to transaction.managed.
 *
 * When using the autocommit transaction you should never commit or rollback the transaction manually. If all db statements
 * are successful, but you still want to rollback the transaction (for example because of a validation failure) you
 * should throw an error.
 *
 * @param callback
 * @returns {*}
 */
exports.autocommit = function(callback){
	Transaction.begin();

	try {
		var returnValue  = null;
		if (callback && typeof(callback) === "function") {
			returnValue  = callback();
		};
		Transaction.commit();
		return returnValue ;
	}
	catch (e) {
		Transaction.rollback();
		throw e;
	}
};

/**
 * Convenience function to begin a transaction. Uses dw.system.Transaction.begin() internally.
 */
exports.begin = function(){Transaction.begin()};

/**
 * Convenience function to commit a transaction. Uses dw.system.Transaction.commit() internally.
 */
exports.commit = function(){Transaction.commit()};

/**
 * Convenience function to rollback a transaction. Uses dw.system.Transaction.rollback() internally.
 */
exports.rollback = function(){Transaction.rollback()};
