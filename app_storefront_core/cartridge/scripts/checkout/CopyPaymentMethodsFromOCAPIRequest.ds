/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input PaymentMethodsForm : dw.web.FormElement
*   @input HttpParamMap : dw.web.HttpParameterMap
*   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.web );
importPackage( dw.value );

function execute( args : PipelineDictionary ) : Number
{
	var req : dw.system.Request = request;
	var params : dw.web.HttpParameterMap = args.HttpParamMap;
	var body : String = params.requestBodyAsString;
	
	var form : dw.web.FormElement = args.PaymentMethodsForm;
	var that = this;
	//var form : dw.web.FormElement = args.PaymentMethodsForm;
	
	var requestObject = JSON.parse(body);
	var apm : Object, terms;
	
	for( var x in requestObject ) {
		apm = requestObject[x];
		
		terms = x.split('_');
		if( terms.length==3 ) {
			form[terms[0]][terms[1]][terms[2]].setValue(apm);	
		} else if( terms.length==2 ) {
			form[terms[0]][terms[1]].setValue(apm);	
		} else if( terms.length==1 ) {
			form[terms[0]].setValue(apm);	
		}
	}
    // read pipeline dictionary input parameter
    // ... = args.ExampleIn;

    // insert business logic here

    // write pipeline dictionary output parameter

    // args.ExampleOut = ...

    return PIPELET_NEXT;
}
