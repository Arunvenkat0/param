'use strict';

/** @module views/ProductView */
var View = require('./View');

/**
 * View for store locator functionality.
 */
var ProductView = View.extend(
    {
        /**
         * The purpose of this function is to process variation value selections, and calculate and return the ProductVariationModels
         * for one or multiple products. The function uses the given HttpParameterMap and so the request parameters do not
         * have to be passed in. Variation value selections must be specified as HTTP parameters in the following form:
         * "{prefix_}{pid}_varAttrID={varAttrValueID}". A custom prefix can be set using the "optionalCustomPrefix" parameter.
         * Otherwise, the default prefix "dwvar_" is used. {pid} is the product id. Example: "dwvar_PN00050_color=red". For
         * each product specified as {pid}, a ProductVariationModel instance is created and returned as an element of the
         * "ProductVariationModels" HashMap return parameter. The function processes variation attributes in their defined order
         * and ignores attributes or values not defined for a variation. The function returns a map of ProductVariationModels
         * with the product instance as the key and the ProductVariationModel as the value. For backwards compatibility reasons,
         * the function accepts an optional Product instance as input parameter. The product may either be a master or a variant.
         * If specified, the function returns the ProductVariationModel for this product as "ProductVariationModel" and also as
         * element of the "ProductVariationModels" HashMap parameter. Also, the system tries to find a variant which matches
         * the attributes selected in the HttpParameterMap as closely as possible. The matching product is returned under the
         * key "SelectedProduct". If the passed product is neither a master or a variant, then the product itself is simply
         * returned under the key "SelectedProduct". No value will be returned under the "SelectedProduct" key unless a Product
         * instance was passed to the function.
         *
         * @param parameterMap {dw.web.HttpParameterMap} Variation value selections as HTTP parameters.
         * @param optionalCustomPrefix {String} Optional prefix for HTTP parameters. If nothing is passed, the default prefix "dwvar_" is assumed.
         *
         * @returns {{ProductVariationModels: dw.util.LinkedHashMap, ProductVariationModel: dw.catalog.ProductVariationModel, SelectedProduct: dw.catalog.Product}}
         */
        getProductVariationSelections : function (parameterMap, optionalCustomPrefix) {
            return require('~/cartridge/scripts/util/ProductVariationSelection').getProductVariationSelections(this.product.object, parameterMap, optionalCustomPrefix);
        },

        /**
         * The purpose of this function is to process option value selections, and calculate and return the ProductOptionModels
         * for one or multiple products. Option value selections must be specified as HTTP parameters in the following form:
         * {prefix_}{pid}_optionID={optionValueID}. A custom prefix can be set using the 'optionalCustomPrefix" parameter. Otherwise,
         * the default prefix 'dwopt_' is used. {pid} is the product id. Example: dwopt_PN00049_memory=2GB. For each product
         * specified as {pid}, a ProductOptionModel instance is created and returned as an element of the 'ProductOptionModels'
         * hashmap output parameter. The function validates both option id and option value id and selects the option in the
         * related ProductOptionModel instance. If an option is not specified as HTTP parameter, or the specified optionValueID
         * is invalid, the default option value of this option is selected. Invalid optionIDs are silently ignored. The
         * function returns a map of ProductOptionModels with the product instance as the key and the ProductOptionModel as
         * the value. For compatibility reasons, the function does still accept an individual product instance as input
         * parameter. If specified, the function returns the ProductOptionModel for this product as 'ProductOptionModel' and
         * also as element of the 'ProductOptionModels' hashmap parameter.
         *
         * @param parameterMap {dw.web.HttpParameterMap} Product option selections as HTTP parameters.
         * @param optionalCustomPrefix {String} Optional prefix for HTTP parameters. If nothing is passed, the default prefix "dwopt_" is assumed.
         *
         * @returns {{ProductOptionModels: dw.util.LinkedHashMap, ProductOptionModel: dw.catalog.ProductOptionModel}}
         */
        getProductOptionSelections : function (parameterMap, optionalCustomPrefix) {
            return require('~/cartridge/scripts/util/ProductOptionSelection').getProductOptionSelections(this.product.object, parameterMap, optionalCustomPrefix);
        },

        /**
         * @constructor module:views/ProductView~ProductView
         */
        init : function (params) {
            this._super(params);

            this.Product = params.product.object;

            return this;
        }

    });

module.exports = ProductView;

