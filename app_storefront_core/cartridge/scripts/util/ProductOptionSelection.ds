'use strict';

var LinkedHashMap = require('dw/util/LinkedHashMap');
var ProductMgr = require('dw/catalog/ProductMgr');

var FORM_SEPARATOR_CHAR = "_";

/**
 * TODO
 *
 * @type {{getProductOptionSelections: Function}}
 */
var ProductOptionSelection = ({

    /**
     * The purpose of this function is to process option value selections, and calculate and return the ProductOptionModels
     * for one or multiple products. Option value selections must be specified as HTTP parameters in the following form:
     * {prefix_}{pid}_optionID={optionValueID}. A custom prefix can be set using the 'optionalCustomPrefix" parameter. Otherwise,
     * the default prefix 'dwopt_' is used. {pid} is the product id. Example: dwopt_PN00049_memory=2GB. For each product
     * specified as {pid}, a ProductOptionModel instance is created and returned as an element of the 'ProductOptionModels'
     * hashmap output parameter. The function validates both option id and option value id and selects the option in the
     * related ProductOptionModel instance. If an option is not specified as HTTP parameter, or the specified optionValueID
     * is invalid, the default option value of this option is selected. Invalid optionIDs are silently ignored. The
     * function returns a map of ProductOptionModels with the product instance as the key and the ProductOptionModel as
     * the value. For compatibility reasons, the function does still accept an individual product instance as input
     * parameter. If specified, the function returns the ProductOptionModel for this product as 'ProductOptionModel' and
     * also as element of the 'ProductOptionModels' hashmap parameter.
     *
     * @param product An optional product instance for which the ProductOptionModel should be updated.
     * @param parameterMap {dw.web.HttpParameterMap} Product option selections as HTTP parameters.
     * @param optionalCustomPrefix {String} Optional prefix for HTTP parameters. If nothing is passed, the default prefix "dwopt_" is assumed.
     *
     * @returns {{ProductOptionModels: dw.util.LinkedHashMap, ProductOptionModel: dw.catalog.ProductOptionModel}}
     */
    getProductOptionSelections : function (product, parameterMap, optionalCustomPrefix) {
        var formPrefix = (optionalCustomPrefix === "undefined") ? "dwopt_" : optionalCustomPrefix;

        // create a new empty map for product option models
        var productOptionModels = new LinkedHashMap();
        var optionModel = null;

        // get all form records for the prefix
        var params = parameterMap.getParameterMap(formPrefix).getParameterNames();

        for (var i = 0; i < params.length; i++) {
            var pid = "";
            var pidPrefix = formPrefix;
            var key = params[i];

            // loop through the string
            var j = 0;
            while (j < key.length) {
                // a separator character?
                if (key.charAt(j) == FORM_SEPARATOR_CHAR) {
                    // a second following?
                    j++;
                    if (j < key.length && key.charAt(j) == FORM_SEPARATOR_CHAR) {
                        j++;
                        pid += FORM_SEPARATOR_CHAR;
                    }
                    // a single one
                    else {
                        pidPrefix += key.substring(0, j);
                        break;
                    }
                }
                else {
                    pid += key.charAt(j);
                    j++;
                }
            }

            var optionProduct = ProductMgr.getProduct(pid);
            if (optionProduct) {

                var model = optionProduct.getOptionModel();

                // get map with all entries starting with the standard or custom prefix
                var params = parameterMap.getParameterMap(pidPrefix);
                var paramNames = params.getParameterNames();

                for (var k = 0; k < paramNames.length; k++) {
                    var optionValueID = params.get(paramNames[k]).getStringValue();
                    var optionValue = null;

                    if (optionValueID) {
                        var option = model.getOption(paramNames[k]);

                        if (option) {
                            if (optionValueID) {
                                optionValue = model.getOptionValue(option, optionValueID);
                            }
                            if (optionValue) {
                                model.setSelectedOptionValue(option, optionValue);
                            }
                        }
                    }
                }

                productOptionModels.put(optionProduct, model);
            }
        }

        if (product) {
            // try to get the option model from the map
            optionModel = productOptionModels.get(product);
        }

        return {
            ProductOptionModels : productOptionModels,
            ProductOptionModel : optionModel
        };
    }
});

module.exports = ProductOptionSelection;
