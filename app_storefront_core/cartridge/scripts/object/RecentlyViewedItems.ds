'use strict';

var ArrayList = require('dw/util/ArrayList');
var ProductMgr = require('dw/catalog/ProductMgr');

var PRODUCT_ID_PARAMETER_NAME = "pid";
var PRODUCT_PIPELINE_NAMES = new ArrayList(
    'Product-Show',
    'Link-Product',
    'Link-CategoryProduct');

/**
 * TODO
 *
 * @type {{getRecentlyViewedProducts: Function}}
 */
var RecentlyViewedItems = ({

    /**
     * The function returns the set of Products visited in the current session. The set is retrieved from the live click
     * stream recorded in the session. All clicks on a "Product-Show", "Link-Product", or "Link-CategoryProduct" pipeline
     * are interpreted as a product visit. Clicks on different variations of the same master product are merged and
     * treated as one click.
     *
     * @param maxSize {Number} The maximum number of visited products to include in the returned list.
     * @returns {dw.util.ArrayList} The list of last visited products. If no products have been visited, the returned list is empty.
     */
    getRecentlyViewedProducts : function (maxLength) {

        var numberOfProducts = maxLength || 5;

        // get the click stream
        var clicks = session.getClickStream().getClicks();

        // build the last visted
        var products = new ArrayList();

        for (var i = clicks.size() - 1; i >= 0; i--) {
            var click = clicks[i];

            // check, whether it was a product click
            if (PRODUCT_PIPELINE_NAMES.contains(click.getPipelineName())) {

                var sku = click.getParameter(PRODUCT_ID_PARAMETER_NAME);

                if (sku && sku.length > 0) {
                    // get the product
                    var product = ProductMgr.getProduct(sku);
                    if (product) {
                        // check that we don't have the product yet or a shared master
                        var duplicate = false;
                        for (var j = 0; j < products.size(); j++) {
                            // calc a potential master
                            var p1 = (product.isVariant() ? product.getVariationModel().getMaster() : product);
                            var p2 = (products[j].isVariant() ? products[j].getVariationModel().getMaster() : products[j]);

                            // same product
                            if (p1 === p2) {
                                duplicate = true;
                                break;
                            }
                        }

                        // no duplicate so add it
                        if (!duplicate) {
                            products.add(product);
                        }
                    }
                }
            }

            // check whether we have reached the maximum
            if (products.size() >= numberOfProducts) {
                break;
            }
        }

        return products;

    }
});

module.exports = RecentlyViewedItems;
