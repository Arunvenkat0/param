'use strict';
/**
 * Module for category related functionality.
 *
 * @module object/Category
 */

var AbstractHelper = require('app_lora/cartridge/scripts/util/helper/AbstractHelper');

/**
 * Category helper providing enhanced category functionality
 * @class module:object/Category ~Category
 */
var Category = AbstractHelper.extend(
/** @lends module:object/Category ~Category.prototype */
{
	/**
	 * Use this method to get a new instance for a given category.
	 */
	get : function(parameter) {
		var obj = null;
		if (typeof parameter === 'string') {
			obj = dw.catalog.CatalogMgr.getCategory(parameter);
		} else if (typeof parameter === 'object') {
			obj = parameter;
		}
		return new Category(obj);
	},

	/**
	*	Prints out category's alternative url if maintained on custom attribute
	*	uses custom attribute of type MarkupText to be able to maintain url-util styled urls - i.e $url('GiftCert-Purchase')$
	*/
	getUrl : function() {
		var category = this.object;
		var url = dw.web.URLUtils.http('Search-Show', 'cgid', category.getID());

		return url;
	},

	/**
	 * Gets a list of online categories that have the showInMenu attribute set to true.
	 *
	 * @param {Boolean} renderAllCategories Return all online subcategories if true.
	 * @return {Array} subcategories  : Array Subcategories for menu
	 */
	getMenuCategories : function(renderAllCategories) {
	    var subcategories = this.object.getOnlineSubCategories(),
			result = [];
		if (renderAllCategories) {
			return subcategories;
		}
	    if( !empty( subcategories ) ){
	        for each( let subcategory in subcategories ) {
	        	if( ('showInMenu' in subcategory.custom) && subcategory.custom.showInMenu.valueOf() ) {
	        		result.push(subcategory);
	        	}
	        }
	    }
	    return result;
	},

	/**
	Returns top level online categories list if exists, otherwise returns sibling online categories list if exists otherwise returns empty list
	*/
	getTopLevelCategories : function() {
		if (this.object.getParent() !== null) {
			if (this.object.getParent().getParent() !== null) {
				return this.object.getParent().getParent().getOnlineSubCategories();
			} else {
				return this.object.getParent().getOnlineSubCategories();
			}
		} else {
			return new dw.util.ArrayList();
		}
	}
});

/**
 * Returns the root category from site catalog.
 *
 * @returns {dw.catalog.Category} The root catalog category
 */
Category.getTopLevelCategory = function() {
    var siteCatalog = dw.catalog.CatalogMgr.getSiteCatalog();
    return (siteCatalog !== null) ? siteCatalog.getRoot() : null;
};

/** The category class */
module.exports = new Category();